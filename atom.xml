<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-03-14T07:55:39.494Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法专题</title>
    <link href="http://example.com/2023/03/13/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E4%B8%93%E9%A2%98/"/>
    <id>http://example.com/2023/03/13/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E4%B8%93%E9%A2%98/</id>
    <published>2023-03-13T10:31:22.000Z</published>
    <updated>2023-03-14T07:55:39.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进度"><a href="#进度" class="headerlink" title="进度"></a>进度</h1><p>专题算法&gt;小算法&gt;STL&gt;c++&gt;机器学习&gt;项目<br>3.14 25天<br>暴力枚举[2]<br>贪心[3]<br>动态[3]<br>排序[2]<br>搜索[2]<br>图论[2]<br>数论[3]<br>字符串算法[2]<br>数据结构[2]</p><h1 id="暴力枚举"><a href="#暴力枚举" class="headerlink" title="暴力枚举"></a>暴力枚举</h1><h2 id="枚举排列"><a href="#枚举排列" class="headerlink" title="枚举排列"></a>枚举排列</h2><h3 id="生成1-n的全排列"><a href="#生成1-n的全排列" class="headerlink" title="生成1~n的全排列"></a>生成1~n的全排列</h3><p>对1~n每个作为开始递归</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">void print_permutation(int n,int *A,int cur) &#123;</span><br><span class="line">if (cur == n) &#123;</span><br><span class="line">for (int i = 0; i &lt; n;i++)cout &lt;&lt; A[i];</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">for (int i = 1; i &lt;= n; i++) &#123;</span><br><span class="line">int ok = 1;</span><br><span class="line">for (int j = 0; j &lt; cur; j++) &#123;</span><br><span class="line">if (A[j] == i)ok = 0;</span><br><span class="line">&#125;</span><br><span class="line">if (ok) &#123;</span><br><span class="line">A[cur] = i;</span><br><span class="line">print_permutation(n, A, cur + 1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成可重集的排列"><a href="#生成可重集的排列" class="headerlink" title="生成可重集的排列"></a>生成可重集的排列</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">void print_permutation(int n,int *P,int *A,int cur) &#123;</span><br><span class="line">if (cur == n) &#123;</span><br><span class="line">for (int i = 0; i &lt; n;i++)cout &lt;&lt; A[i];</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">            if(!i||p[i]!=p[i-1])&#123;</span><br><span class="line">        int ok = 1;</span><br><span class="line">for (int j = 0; j &lt; cur; j++) &#123;</span><br><span class="line">if (A[j] == P[i])ok = 0;8</span><br><span class="line">&#125;</span><br><span class="line">if (ok) &#123;</span><br><span class="line">A[cur] = P[i];</span><br><span class="line">print_permutation(n,P, A, cur + 1);</span><br><span class="line">&#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用STL中的next-permutation"><a href="#使用STL中的next-permutation" class="headerlink" title="使用STL中的next_permutation"></a>使用STL中的next_permutation</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int main() &#123;</span><br><span class="line">int n = 3;</span><br><span class="line">int p[3] = &#123; 2,1,3 &#125;;</span><br><span class="line">sort(p, p + n);</span><br><span class="line">do &#123;</span><br><span class="line">for (int i = 0; i &lt; n; i++)cout &lt;&lt; p[i];</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;while (next_permutation(p, p + n));</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="子集生成"><a href="#子集生成" class="headerlink" title="子集生成"></a>子集生成</h2><h3 id="增量构造法"><a href="#增量构造法" class="headerlink" title="增量构造法"></a>增量构造法</h3><p>每次开始的位置+1,且每次都输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">01</span><br><span class="line">012</span><br><span class="line">02</span><br><span class="line">1</span><br><span class="line">12</span><br><span class="line">2</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void print_subset(int n, int* A, int cur) &#123;</span><br><span class="line">for (int i = 0; i &lt; cur; i++)cout &lt;&lt; A[i];</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">int s = cur ? A[cur - 1] + 1 : 0;</span><br><span class="line">for (int i = s; i &lt; n; i++) &#123;</span><br><span class="line">A[cur] = i;</span><br><span class="line">print_subset(n, A, cur+1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="位向量法"><a href="#位向量法" class="headerlink" title="位向量法"></a>位向量法</h3><p>同全排列一样，到n才输出，选取位置1，否则0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void print_subset(int n,int* B,int cur)&#123;</span><br><span class="line">    if(cur==n)&#123;</span><br><span class="line">        for(int i=0;i&lt;cur;i++)</span><br><span class="line">        if(B[i])cout&lt;&lt;i;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    B[cur]=1;//选取</span><br><span class="line">    print_subset(n,B,cur+1);</span><br><span class="line">    B[cur]=0;//不选取</span><br><span class="line">    print_subset(n,B,cur+1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二进制法"><a href="#二进制法" class="headerlink" title="二进制法"></a>二进制法</h3><p>三个数的集合<br>001，010，100<br>s从000到111</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void print_subset()&#123;</span><br><span class="line">    for(int i=0;i&lt;n;i++)</span><br><span class="line">        if(s&amp;(1&lt;&lt;i))cout&lt;&lt;i;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">for(int i=0;i&lt;(1&lt;&lt;n);i++)&#123; //</span><br><span class="line">    print_subset(n,i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h2><p>在递归中判断</p><h3 id="八皇后问题"><a href="#八皇后问题" class="headerlink" title="八皇后问题"></a>八皇后问题</h3><h4 id="常规法"><a href="#常规法" class="headerlink" title="常规法"></a>常规法</h4><p>递归每一行可能放置的列，并且检查是否冲突（回溯），若不冲突，继续递归</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void search(int cur)&#123;</span><br><span class="line">    if(cur==n)total++;</span><br><span class="line">    else for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        int ok=1;</span><br><span class="line">        C[cur]=i;      //把第cur行的皇后放在i列</span><br><span class="line">        for(int j=0;j&lt;cur;j++)&#123;//检查和之前皇后的冲突问题</span><br><span class="line">            if(C[cur]==C[j]||cur-C[cur]==j-C[j]||cur+C[cur]==j+C[cur])</span><br><span class="line">            &#123;ok=0;break;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(ok)search(cur+1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优化版（数组）"><a href="#优化版（数组）" class="headerlink" title="优化版（数组）"></a>优化版（数组）</h4><p>用二维数组来判断列、副对角线、主对角线的冲突情况:<br>vis[0][i]:第i列冲突情况<br>vis[1][x+y]:副对角线冲突情况坐标（x，y）<br>vis[1][y-x+n]:主对角线冲突情况坐标（x，y）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">`void search(int cur)&#123;</span><br><span class="line">    if(cur==n)total++;</span><br><span class="line">    else for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        if(!vis[0][i]&amp;&amp;!vis[1][i+cur]&amp;&amp;!vis[1][cur-i+n])&#123;//判断冲突</span><br><span class="line">            C[cur]=i;</span><br><span class="line">            vis[0][i]=vis[1][i+cur]=vis[1][cur-1+n]=1;//更新冲突情况</span><br><span class="line">            search(cur+1);</span><br><span class="line">            vis[0][i]=vis[1][i+cur]=vis[1][cur-1+n]=0;//当前i不可行，复原冲突情况</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="素数环-UVa-524"><a href="#素数环-UVa-524" class="headerlink" title="素数环 UVa 524"></a>素数环 UVa 524</h3><p>使用回溯，判断是否使用过以及是否和前一个之和为素数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line">int A[16];</span><br><span class="line">int isp[32];</span><br><span class="line">int n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">for(int i=2;i&lt;=2*n;i++)isp[i]=is_prime(i);//生成素数表</span><br><span class="line">for(int i=2;i&lt;=n;i++)vis[i]=0;//未被选择</span><br><span class="line">dfs(1,n,A,isp,vis);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">void dfs(int cur,int n,int *A,int *isp,int *vis)&#123;</span><br><span class="line">if(cur==n&amp;&amp;isp[A[0]+A[n-1]])&#123; //测试边界是否满足</span><br><span class="line">for(int i=0;i&lt;n;i++)cout&lt;&lt;A[i]&lt;&lt;&quot; &quot;;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">else for(int i=2;i&lt;=n;i++)&#123;</span><br><span class="line">if(!vis[i]&amp;&amp;isp[i+A[cur-1]])&#123;//没有选择过且和前一位之和为素数</span><br><span class="line">A[cur]=i;</span><br><span class="line">vis[i]=1; //标记使用过</span><br><span class="line">dfs(cur+1,n,A,isp,vis);</span><br><span class="line">vis[i]=0; //清除标记</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int is_prime(int i)&#123;</span><br><span class="line">if(i&lt;=1)return 0;</span><br><span class="line">for(int i=2;i&lt;=sqrt(n);i++)&#123;</span><br><span class="line">if(n%i==0)return 0;</span><br><span class="line">&#125;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="困难的串-UVa-129"><a href="#困难的串-UVa-129" class="headerlink" title="困难的串 UVa 129"></a>困难的串 UVa 129</h3><h3 id="带宽-UVa-140"><a href="#带宽-UVa-140" class="headerlink" title="带宽 UVa 140"></a>带宽 UVa 140</h3><h3 id="天平难题-UVa-1354"><a href="#天平难题-UVa-1354" class="headerlink" title="天平难题 UVa 1354"></a>天平难题 UVa 1354</h3><h1 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h1><h1 id="动态"><a href="#动态" class="headerlink" title="动态"></a>动态</h1><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><h1 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h1><h1 id="字符串算法"><a href="#字符串算法" class="headerlink" title="字符串算法"></a>字符串算法</h1><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;进度&quot;&gt;&lt;a href=&quot;#进度&quot; class=&quot;headerlink&quot; title=&quot;进度&quot;&gt;&lt;/a&gt;进度&lt;/h1&gt;&lt;p&gt;专题算法&amp;gt;小算法&amp;gt;STL&amp;gt;c++&amp;gt;机器学习&amp;gt;项目&lt;br&gt;3.14 25天&lt;br&gt;暴力枚举[2]&lt;br&gt;贪心[3</summary>
      
    
    
    
    <category term="-算法专题" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E4%B8%93%E9%A2%98/"/>
    
    
    <category term="-算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>C++笔记</title>
    <link href="http://example.com/2023/03/13/C++/C++%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2023/03/13/C++/C++%E7%AC%94%E8%AE%B0/</id>
    <published>2023-03-13T10:26:45.000Z</published>
    <updated>2023-03-13T10:30:27.784Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;int&gt; A;</span><br><span class="line">A[0]=1;</span><br></pre></td></tr></table></figure><p>会报错，因为A还是空，需要A.push_back(1)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;vector&quot;&gt;&lt;a href=&quot;#vector&quot; class=&quot;headerlink&quot; title=&quot;vector&quot;&gt;&lt;/a&gt;vector&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</summary>
      
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>all</title>
    <link href="http://example.com/2023/03/13/%E7%AE%97%E6%B3%95/all/"/>
    <id>http://example.com/2023/03/13/%E7%AE%97%E6%B3%95/all/</id>
    <published>2023-03-13T01:17:35.000Z</published>
    <updated>2023-03-13T01:34:42.103Z</updated>
    
    <content type="html"><![CDATA[<p>[toc] </p><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h4 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h4><p><img src="/2023/03/13/%E7%AE%97%E6%B3%95/all/a.png" alt="i-20230313092954602"></p><p>非递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (target &lt; nums[<span class="number">0</span>] || target &gt; nums[nums.length - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">             <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; nums[mid]) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &gt; nums[mid]) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javasuanfa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        System.out.println(search(nums, target,<span class="number">0</span>,nums.length-<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; nums[<span class="number">0</span>] || target &gt; nums[nums.length - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        left = <span class="number">0</span>;</span><br><span class="line">        right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; nums[mid]) &#123;</span><br><span class="line">            <span class="keyword">return</span> search(nums, target, left, mid - <span class="number">1</span>);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (target &gt; nums[mid]) &#123;</span><br><span class="line">            <span class="keyword">return</span> search(nums, target, mid + <span class="number">1</span>, right);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h4><h5 id="删除数组元素"><a href="#删除数组元素" class="headerlink" title="删除数组元素"></a>删除数组元素</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">  </span><br><span class="line">        <span class="type">int</span> slowp=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> fastp=<span class="number">0</span>;fastp&lt;nums.length;fastp++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fastp]!=val)&#123;</span><br><span class="line">                nums[slowp++]=nums[fastp];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> slowp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="有序数组平方"><a href="#有序数组平方" class="headerlink" title="有序数组平方"></a>有序数组平方</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">int</span>[] result =<span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=nums.length-<span class="number">1</span>;k&gt;=<span class="number">0</span>;k--)&#123;</span><br><span class="line">            <span class="type">int</span> lsquare=nums[left]*nums[left];</span><br><span class="line">            <span class="type">int</span> rqsuare=nums[right]*nums[right];</span><br><span class="line">            <span class="keyword">if</span>(rqsuare&gt;lsquare) &#123;</span><br><span class="line">                result[k] = rqsuare;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                result[k]=lsquare;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="滑动窗口-长度最小子数组"><a href="#滑动窗口-长度最小子数组" class="headerlink" title="滑动窗口(长度最小子数组)"></a>滑动窗口(长度最小子数组)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">          <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; nums.length; right++) &#123;</span><br><span class="line">            sum += nums[right];</span><br><span class="line">            <span class="keyword">while</span> (sum &gt;= target) &#123;</span><br><span class="line">                result = Math.min(result, right - left + <span class="number">1</span>);</span><br><span class="line">                sum -= nums[left++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result == Integer.MAX_VALUE ? <span class="number">0</span> : result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="螺旋矩阵"><a href="#螺旋矩阵" class="headerlink" title="螺旋矩阵"></a>螺旋矩阵</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] generate</span><br><span class="line">        </span><br><span class="line">        <span class="title function_">Matrix</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[][] result = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="comment">//填充数字</span></span><br><span class="line">        <span class="type">int</span> insert=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//循环次数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">loop</span> <span class="operator">=</span> n / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//偏移量</span></span><br><span class="line">        <span class="type">int</span> offset=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//起始位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">StartX</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">StartY</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//坐标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//中间</span></span><br><span class="line">        <span class="type">int</span> mid=n/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (loop&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            x=StartX;</span><br><span class="line">            y=StartY;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//上行</span></span><br><span class="line">            <span class="keyword">for</span>(;x&lt;n-offset-<span class="number">1</span>;x++)&#123;</span><br><span class="line">                result[y][x]=insert++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//右列</span></span><br><span class="line">            <span class="keyword">for</span> (;y&lt;n-offset-<span class="number">1</span>;y++)&#123;</span><br><span class="line">                result[y][x]=insert++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//下列</span></span><br><span class="line">            <span class="keyword">for</span>(;x&gt;StartX;x--)&#123;</span><br><span class="line">                result[y][x]=insert++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//左列</span></span><br><span class="line">            <span class="keyword">for</span> (;y&gt;StartY;y--)&#123;</span><br><span class="line">                result[y][x]=insert++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            loop--;</span><br><span class="line">            offset++;</span><br><span class="line">            StartX++;</span><br><span class="line">            StartY++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>)result[mid][mid]=insert;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)result[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="广义表"><a href="#广义表" class="headerlink" title="广义表"></a>广义表</h2><p><strong>1. 广义表的定义</strong></p><p>  广义表(Lists，又称列表)是线性表的推广。即广义表中放松对表元素的原子限制，容许它们具有其自身结构。</p><p>  <strong>广义表</strong>是n(n≥0)个元素a1，a2，…，ai，…，an的有限序列。<br> 其中：<br>  　①ai–或者是原子或者是一个广义表。<br>　  ②广义表通常记作：<br>        Ls&#x3D;( a1，a2，…，ai，…，an)。<br>　　 ③Ls是广义表的名字，n为它的<strong>长度</strong>。<br>　 　④若ai是广义表，则称它为Ls的<strong>子表</strong>。<br> 注意：<br>  　①广义表通常用圆括号括起来，用逗号分隔其中的元素。<br>  　②为了区分原子和广义表，书写时用大写字母表示<strong>广义表</strong>，用小写字母表示<strong>原子</strong>。<br>  　③若广义表Ls非空(n≥1)，则al是LS的表头，其余元素组成的表(a1，a2，…，an)称为Ls的表。</p><p>​    ④广义表是递归定义的。</p><p><strong>2. 广义表的表示</strong></p><p>  （1）广义表常用表示<br>　　① E&#x3D;()<br>   　E是一个空表，其长度为0。<br>　　② L&#x3D;(a，b)<br>   　L是长度为2的广义表，它的两个元素都是原子，因此它是一个线性表<br>　　③ A&#x3D;(x，L)&#x3D;(x，(a，b))<br>   　A是长度为2的广义表，第一个元素是原子x，第二个元素是子表L。<br>　　④ B&#x3D;(A，y)&#x3D;((x，(a，b))，y)<br>　   B是长度为2的广义表，第一个元素是子表A，第二个元素是原子y。<br>　　⑤ C&#x3D;(A，B)&#x3D;((x，(a，b))，((x，(a，b))，y))<br>   　C的长度为2，两个元素都是子表。<br>　　⑥ D&#x3D;(a，D)&#x3D;(a，(a，(a，(…))))<br>   　D的长度为2，第一个元素是原子，第二个元素是D自身，展开后它是一个无限的广义表。</p><p>  （2）广义表的深度<br>　　一个表的”深度”是指表展开后所含括号的层数。<br> 【例】表L、A、B、C的深度为分别为1、2、3、4，表D的深度为∞。</p><p>  （3）带名字的广义表表示<br>  如果规定任何表都是有名字的，为了既表明每个表的名字，又说明它的组成，则可以在每个表的前面冠以该表的名字，于是上例中的各表又可以写成：<br>  ①E()<br>  ②L(a，b)<br>  ③A(x，L(a，b))<br>  ④B(A(x，L(a，b))，y)<br>  ⑤C(A(x，l(a，b))，B(A(x，L(a，b))，y))<br>  ⑥D(a，D(a，D(…)))</p><p>  （4）广义表的图形表示<br>   ①图中的分支结点对应广义表<br>   ②非分支结点一般是原子<br>  　③但空表对应的也是非分支结点。<br>　　【例】下图给出了几个广义表的图形表示</p><p><img src="https://www.iteye.com/upload/picture/pic/89374/069727c7-8f65-3dea-8f39-d052bea3c669.jpg" alt="img"></p><p>图 广义表的图形表示</p><p><strong>3. 广义表的操作</strong></p><p>  广义表的基本操作主要有以下5种：</p><p>  （1）GetHead(L)：求广义表的表头操作。如果广义表是空表，返回NULL，否则返回指向表头结点的指针。</p><p>  （2）GetTail(L)：求广义表的表尾操作。如果广义表是空表，返回NULL，否则返回指向表尾结点的指针。</p><p>  （3）GListLength(L)：返回广义表的长度操作。如果广义表是空表，则返回0，否则返回广义表的长度。</p><p>  （4）GListDepth(L)：求广义表的深度操作。深度就是广义表中括号嵌套的层数。空表返回1，否则返回表的深度。</p><p>  （5）CopyGList(&amp;T,L)：广义表的复制操作。由广义表L复制得到广义表T。复制成功返回1，否则返回0。</p><p>  广义表中的每个元素可以用一个结点表示，表中有两类结点：原子结点和子表结点。广义表可以分解为表头和表尾，一个表头和一个表尾可以确定一个广义表。因此，一个表结点一般由三个域组成：标志域、指向表头的指针域和指向表尾的指针域。一个原子结点一般由两个域组成：标志域和值域。<strong>4. 广义表的运算</strong> </p><p>  在此，只讨论广义表的两个特殊的基本运算：取表头head(Ls)和取表尾tail(Ls)。<br>  　根据表头、表尾的定义可知：任何一个非空广义表的表头是表中第一个元素，它可以是原子，也可以是子表，而其表尾必定是子表。<br> 【例】<br>   head(L)&#x3D;a， tail(L)&#x3D;(b)<br>   head(B)&#x3D;A， tail(B)&#x3D;(y)<br> 由于tail(L)是非空表，可继续分解得到：<br>   head(tail(L))&#x3D;b， tail(tail(L))&#x3D;()<br> 对非空表A和(y)，也可继续分解。<br> 注意:广义表()和(())不同。前者是长度为0的空表，对其不能做求表头和表尾的运算；而后者是长度为l的非空表(只不过该表中惟一的一个元素是空表)，对其可进行分解，得到的表头和表尾均是空表()。</p><h2 id="表"><a href="#表" class="headerlink" title="表"></a><span id="biao">表</span></h2><ul><li>iterator迭代器</li><li></li></ul><p><a href="https://blog.csdn.net/qq_29689343/article/details/113832455">https://blog.csdn.net/qq_29689343/article/details/113832455</a></p><h3 id="SeqList"><a href="#SeqList" class="headerlink" title="SeqList"></a>SeqList</h3><h4 id="操作合集"><a href="#操作合集" class="headerlink" title="操作合集"></a>操作合集</h4><h5 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SeqList.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdlib.h&quot;</span>   <span class="comment">//realloc</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;String&quot;</span>    <span class="comment">//string</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;assert.h&quot;</span>  <span class="comment">//assert</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span> <span class="comment">//cout</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化操作</span></span><br><span class="line"><span class="type">int</span> SeqList:: <span class="built_in">InitList</span>(SeqList&amp; L) &#123;</span><br><span class="line">    L.elem = <span class="keyword">new</span> <span class="type">int</span>[LIST_INIT_SIZE];</span><br><span class="line">    L.length = <span class="number">0</span>;</span><br><span class="line">    L.listsize = LIST_INIT_SIZE;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//增加存储容量</span></span><br><span class="line"><span class="type">int</span> SeqList:: <span class="built_in">addlistsize</span>(SeqList&amp; L, <span class="type">int</span> n) &#123;</span><br><span class="line">    <span class="type">int</span>* newbase = (<span class="type">int</span>*)<span class="built_in">realloc</span>(L.elem, (L.listsize + n * LISTINCREMENT) * <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">if</span> (!newbase)<span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">    L.elem = newbase;</span><br><span class="line">    L.listsize += n * LISTINCREMENT;<span class="comment">//增加储存容量</span></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结构销毁操作</span></span><br><span class="line"><span class="type">int</span> SeqList:: <span class="built_in">DestroyList</span>(SeqList&amp; L) &#123;</span><br><span class="line">    <span class="keyword">delete</span>[] L.elem;</span><br><span class="line">    L.elem = <span class="literal">NULL</span>;</span><br><span class="line">    L.length = <span class="number">0</span>;</span><br><span class="line">    L.listsize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//引用型操作</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">SeqList::ListEmpty</span><span class="params">(SeqList L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> L.length == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqList::ListLength</span><span class="params">(SeqList L)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(L.elem != <span class="literal">NULL</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;顺序表长度：&quot;</span> &lt;&lt; L.length&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> L.length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求前驱</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqList::PriorElem</span><span class="params">(SeqList L, <span class="type">int</span> cur_e, <span class="type">int</span>&amp; pre_e)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(L.elem != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">LocateElem</span>(L, cur_e) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;该元素无前驱&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    pre_e = L.elem[<span class="built_in">LocateElem</span>(L, cur_e) - <span class="number">1</span>];</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;元素&quot;</span>&lt;&lt;cur_e&lt;&lt;<span class="string">&quot;的前驱：&quot;</span> &lt;&lt; pre_e &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求后驱</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqList::NextElem</span><span class="params">(SeqList L, <span class="type">int</span> cur_e, <span class="type">int</span>&amp; next_e)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(L.elem != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">LocateElem</span>(L, cur_e) &gt;= L.length - <span class="number">1</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;该元素无后驱&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    next_e = L.elem[<span class="built_in">LocateElem</span>(L, cur_e) + <span class="number">1</span>];</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;元素&quot;</span> &lt;&lt; cur_e &lt;&lt; <span class="string">&quot;的后驱：&quot;</span> &lt;&lt; next_e &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取第i个元素的值返回于e</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqList::GetElem</span><span class="params">(SeqList L, <span class="type">int</span> i, <span class="type">int</span>&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(L.elem != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt; L.length ) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;越界&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    e = L.elem[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定位元素</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqList::LocateElem</span><span class="params">(SeqList L, <span class="type">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(L.elem != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (L.elem[i] == e) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;元素&quot;</span> &lt;&lt; e &lt;&lt; <span class="string">&quot;的位置：&quot;</span> &lt;&lt; i&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;该表内无&quot;</span> &lt;&lt; e &lt;&lt; <span class="string">&quot;元素&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历打印</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqList::ListTraverse</span><span class="params">(SeqList L)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(L.elem != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (L.length == <span class="number">0</span>)cout &lt;&lt; <span class="string">&quot;该顺序表内无元素&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;L内元素为：&quot;</span> ;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; ++i) &#123;</span><br><span class="line">        cout &lt;&lt; L.elem[i] &lt;&lt; <span class="string">&quot; &quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//置空</span></span><br><span class="line"><span class="type">int</span> SeqList:: <span class="built_in">ClearList</span>(SeqList&amp; L) &#123;</span><br><span class="line">    <span class="keyword">delete</span>[] L.elem;</span><br><span class="line">    <span class="built_in">InitList</span>(L);</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//改变i位置的值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqList::PutElem</span><span class="params">(SeqList&amp; L, <span class="type">int</span> i, <span class="type">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(L.elem != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt; L.length - <span class="number">1</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;越界&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    L.elem[i] = e;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在第i个元素之前插入</span></span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">SeqList::ListInsert</span><span class="params">(SeqList&amp; L, <span class="type">int</span> i, <span class="type">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(L.elem != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length + <span class="number">1</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;插入位置越界&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (L.length &gt;= L.listsize) &#123;<span class="comment">//存储空间已满</span></span><br><span class="line">        <span class="built_in">addlistsize</span>(L, <span class="number">1</span>);<span class="comment">//增加存储10Datatype容量</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = L.length - <span class="number">1</span>; j &gt;= i - <span class="number">1</span>; --j)</span><br><span class="line">        L.elem[j + <span class="number">1</span>] = L.elem[j];</span><br><span class="line">    L.elem[i - <span class="number">1</span>] = e;</span><br><span class="line">    L.length++;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除i个元素</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqList::ListDelete</span><span class="params">(SeqList&amp; L, <span class="type">int</span> i, <span class="type">int</span> &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(L.elem != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;删除元素越界&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    e = L.elem[i];</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; L.length<span class="number">-1</span>; ++i)</span><br><span class="line">        L.elem[i] = L.elem[i+<span class="number">1</span>];</span><br><span class="line">    L.length--;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾插</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqList::SeqListPushBack</span><span class="params">(SeqList &amp;L, <span class="type">int</span>  x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(&amp;L);</span><br><span class="line">    <span class="comment">//L.ListInsert(L,L.length+1,x);         调用插入函数</span></span><br><span class="line">    L.elem[L.length] = x;</span><br><span class="line">    L.length++;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尾删</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqList::SeqListPopBack</span><span class="params">(SeqList &amp;L)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(&amp;L);</span><br><span class="line">    <span class="type">int</span> e;</span><br><span class="line">    L.<span class="built_in">ListDelete</span>(L,L.length<span class="number">-1</span>,e);</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="type">int</span> SeqList:: <span class="built_in">Test</span>() &#123;</span><br><span class="line">    SeqList s;</span><br><span class="line">    s.<span class="built_in">InitList</span>(s);<span class="comment">//初始化</span></span><br><span class="line"></span><br><span class="line">    s.<span class="built_in">SeqListPushBack</span>(s, <span class="number">1</span>);  <span class="comment">//尾插</span></span><br><span class="line">    s.<span class="built_in">SeqListPushBack</span>(s, <span class="number">2</span>);</span><br><span class="line">    s.<span class="built_in">SeqListPushBack</span>(s, <span class="number">3</span>);</span><br><span class="line">    s.<span class="built_in">ListInsert</span>(s, <span class="number">4</span>, <span class="number">4</span>);    <span class="comment">//指定插入</span></span><br><span class="line">    s.<span class="built_in">ListTraverse</span>(s);     <span class="comment">//遍历</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> e = <span class="number">2</span>, cure_e = <span class="number">2</span>;</span><br><span class="line">    s.<span class="built_in">LocateElem</span>(s, e);<span class="comment">//获取e元素的位置</span></span><br><span class="line">    s.<span class="built_in">GetElem</span>(s, <span class="number">3</span>, e);<span class="comment">//获取第三个元素的值</span></span><br><span class="line">    s.<span class="built_in">PriorElem</span>(s, cure_e, e);<span class="comment">//求前驱</span></span><br><span class="line">    s.<span class="built_in">NextElem</span>(s, cure_e, e);<span class="comment">//求后驱</span></span><br><span class="line"></span><br><span class="line">    s.<span class="built_in">ListLength</span>(s);    <span class="comment">//顺序表长度</span></span><br><span class="line">    s.<span class="built_in">PutElem</span>(s, <span class="number">2</span>, <span class="number">5</span>);<span class="comment">//改变第三个元素的值</span></span><br><span class="line">    s.<span class="built_in">SeqListPopBack</span>(s);         <span class="comment">//尾删</span></span><br><span class="line">    s.<span class="built_in">ListTraverse</span>(s);           <span class="comment">//遍历 </span></span><br><span class="line">    s.<span class="built_in">ListLength</span>(s);</span><br><span class="line">    s.<span class="built_in">ClearList</span>(s); <span class="comment">//置空</span></span><br><span class="line">    s.<span class="built_in">ListTraverse</span>(s);</span><br><span class="line">    s.<span class="built_in">DestroyList</span>(s); <span class="comment">//销毁</span></span><br><span class="line">    s.<span class="built_in">ListTraverse</span>(s);</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="函数列举"><a href="#函数列举" class="headerlink" title="函数列举"></a>函数列举</h5><h6 id="初始化操作"><a href="#初始化操作" class="headerlink" title="初始化操作"></a>初始化操作</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> SeqList:: <span class="built_in">InitList</span>(SeqList&amp; L) &#123;</span><br><span class="line">    L.elem = <span class="keyword">new</span> <span class="type">int</span>[LIST_INIT_SIZE];</span><br><span class="line">    L.length = <span class="number">0</span>;</span><br><span class="line">    L.listsize = LIST_INIT_SIZE;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="增加存储容量"><a href="#增加存储容量" class="headerlink" title="增加存储容量"></a>增加存储容量</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> SeqList:: <span class="built_in">addlistsize</span>(SeqList&amp; L, <span class="type">int</span> n) &#123;</span><br><span class="line">    <span class="type">int</span>* newbase = (<span class="type">int</span>*)<span class="built_in">realloc</span>(L.elem, (L.listsize + n * LISTINCREMENT) * <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">if</span> (!newbase)<span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">    L.elem = newbase;</span><br><span class="line">    L.listsize += n * LISTINCREMENT;<span class="comment">//增加储存容量</span></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="结构销毁操作"><a href="#结构销毁操作" class="headerlink" title="结构销毁操作"></a>结构销毁操作</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> SeqList:: <span class="built_in">DestroyList</span>(SeqList&amp; L) &#123;</span><br><span class="line">    <span class="keyword">delete</span>[] L.elem;</span><br><span class="line">    L.elem = <span class="literal">NULL</span>;</span><br><span class="line">    L.length = <span class="number">0</span>;</span><br><span class="line">    L.listsize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="判空"><a href="#判空" class="headerlink" title="判空"></a>判空</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">SeqList::ListEmpty</span><span class="params">(SeqList L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> L.length == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="求长"><a href="#求长" class="headerlink" title="求长"></a>求长</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqList::ListLength</span><span class="params">(SeqList L)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(L.elem != <span class="literal">NULL</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;顺序表长度：&quot;</span> &lt;&lt; L.length&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> L.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="求前驱"><a href="#求前驱" class="headerlink" title="求前驱"></a>求前驱</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqList::PriorElem</span><span class="params">(SeqList L, <span class="type">int</span> cur_e, <span class="type">int</span>&amp; pre_e)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(L.elem != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">LocateElem</span>(L, cur_e) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;该元素无前驱&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    pre_e = L.elem[<span class="built_in">LocateElem</span>(L, cur_e) - <span class="number">1</span>];</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;元素&quot;</span>&lt;&lt;cur_e&lt;&lt;<span class="string">&quot;的前驱：&quot;</span> &lt;&lt; pre_e &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="求后驱"><a href="#求后驱" class="headerlink" title="求后驱"></a>求后驱</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqList::NextElem</span><span class="params">(SeqList L, <span class="type">int</span> cur_e, <span class="type">int</span>&amp; next_e)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(L.elem != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">LocateElem</span>(L, cur_e) &gt;= L.length - <span class="number">1</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;该元素无后驱&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    next_e = L.elem[<span class="built_in">LocateElem</span>(L, cur_e) + <span class="number">1</span>];</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;元素&quot;</span> &lt;&lt; cur_e &lt;&lt; <span class="string">&quot;的后驱：&quot;</span> &lt;&lt; next_e &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="获取第i个元素的值返回于e"><a href="#获取第i个元素的值返回于e" class="headerlink" title="获取第i个元素的值返回于e"></a>获取第i个元素的值返回于e</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqList::GetElem</span><span class="params">(SeqList L, <span class="type">int</span> i, <span class="type">int</span>&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(L.elem != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt; L.length ) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;越界&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    e = L.elem[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="定位元素"><a href="#定位元素" class="headerlink" title="定位元素"></a>定位元素</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqList::LocateElem</span><span class="params">(SeqList L, <span class="type">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(L.elem != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (L.elem[i] == e) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;元素&quot;</span> &lt;&lt; e &lt;&lt; <span class="string">&quot;的位置：&quot;</span> &lt;&lt; i&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;该表内无&quot;</span> &lt;&lt; e &lt;&lt; <span class="string">&quot;元素&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="遍历打印"><a href="#遍历打印" class="headerlink" title="遍历打印"></a>遍历打印</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqList::ListTraverse</span><span class="params">(SeqList L)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(L.elem != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (L.length == <span class="number">0</span>)cout &lt;&lt; <span class="string">&quot;该顺序表内无元素&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;L内元素为：&quot;</span> ;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; ++i) &#123;</span><br><span class="line">        cout &lt;&lt; L.elem[i] &lt;&lt; <span class="string">&quot; &quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="置空"><a href="#置空" class="headerlink" title="置空"></a>置空</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> SeqList:: <span class="built_in">ClearList</span>(SeqList&amp; L) &#123;</span><br><span class="line">    <span class="keyword">delete</span>[] L.elem;</span><br><span class="line">    <span class="built_in">InitList</span>(L);</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="改变i位置的值"><a href="#改变i位置的值" class="headerlink" title="改变i位置的值"></a>改变i位置的值</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqList::PutElem</span><span class="params">(SeqList&amp; L, <span class="type">int</span> i, <span class="type">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(L.elem != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt; L.length - <span class="number">1</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;越界&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    L.elem[i] = e;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="在第i个元素之前插入"><a href="#在第i个元素之前插入" class="headerlink" title="在第i个元素之前插入"></a>在第i个元素之前插入</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>  <span class="title">SeqList::ListInsert</span><span class="params">(SeqList&amp; L, <span class="type">int</span> i, <span class="type">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(L.elem != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length + <span class="number">1</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;插入位置越界&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (L.length &gt;= L.listsize) &#123;<span class="comment">//存储空间已满</span></span><br><span class="line">        <span class="built_in">addlistsize</span>(L, <span class="number">1</span>);<span class="comment">//增加存储10Datatype容量</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = L.length - <span class="number">1</span>; j &gt;= i - <span class="number">1</span>; --j)</span><br><span class="line">        L.elem[j + <span class="number">1</span>] = L.elem[j];</span><br><span class="line">    L.elem[i - <span class="number">1</span>] = e;</span><br><span class="line">    L.length++;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="删除i个元素"><a href="#删除i个元素" class="headerlink" title="删除i个元素"></a>删除i个元素</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqList::ListDelete</span><span class="params">(SeqList&amp; L, <span class="type">int</span> i, <span class="type">int</span> &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(L.elem != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;删除元素越界&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    e = L.elem[i];</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; L.length<span class="number">-1</span>; ++i)</span><br><span class="line">        L.elem[i] = L.elem[i+<span class="number">1</span>];</span><br><span class="line">    L.length--;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="尾插"><a href="#尾插" class="headerlink" title="尾插"></a>尾插</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqList::SeqListPushBack</span><span class="params">(SeqList &amp;L, <span class="type">int</span>  x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(&amp;L);</span><br><span class="line">    <span class="comment">//L.ListInsert(L,L.length+1,x);         调用插入函数</span></span><br><span class="line">    L.elem[L.length] = x;</span><br><span class="line">    L.length++;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="置空-1"><a href="#置空-1" class="headerlink" title="置空"></a>置空</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> SeqList:: <span class="built_in">ClearList</span>(SeqList&amp; L) &#123;</span><br><span class="line">    <span class="keyword">delete</span>[] L.elem;</span><br><span class="line">    <span class="built_in">InitList</span>(L);</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="尾删"><a href="#尾删" class="headerlink" title="尾删"></a>尾删</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">SeqList::SeqListPopBack</span><span class="params">(SeqList &amp;L)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(&amp;L);</span><br><span class="line">    <span class="type">int</span> e;</span><br><span class="line">    L.<span class="built_in">ListDelete</span>(L,L.length<span class="number">-1</span>,e);</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><h4 id="操作合集-1"><a href="#操作合集-1" class="headerlink" title="操作合集"></a>操作合集</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ListNode.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">ListNode::<span class="built_in">ListNode</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;val =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;next =<span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ListNode::<span class="built_in">ListNode</span>(<span class="type">int</span> val, ListNode* next)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;val = val;</span><br><span class="line">    <span class="keyword">this</span>-&gt;next = next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ListNode::<span class="built_in">ListNode</span>(<span class="type">int</span> val)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;val = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ListNode::<span class="built_in">ListNode</span>( ListNode* next)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;next = next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ListNode::Val</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function">ListNode* <span class="title">ListNode::initList</span><span class="params">(ListNode* head,<span class="type">int</span> a[],<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> inputnum;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    ListNode* node;</span><br><span class="line">    ListNode* nodetemp;</span><br><span class="line">    head = <span class="literal">nullptr</span>;</span><br><span class="line">    nodetemp = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">       inputnum=a[i];</span><br><span class="line">       i++;</span><br><span class="line">        node = <span class="keyword">new</span> ListNode;</span><br><span class="line">        node-&gt;val = inputnum;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            head = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            nodetemp-&gt;next = node;</span><br><span class="line">        &#125;</span><br><span class="line">        nodetemp = node;</span><br><span class="line">        nodetemp-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建</span></span><br><span class="line"><span class="function">ListNode* <span class="title">ListNode::CreatList</span><span class="params">(ListNode* head,<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;input:&quot;</span>;</span><br><span class="line">    <span class="type">int</span> inputnum; </span><br><span class="line">    ListNode* node;</span><br><span class="line">    ListNode* nodetemp;</span><br><span class="line">    head = <span class="literal">nullptr</span>;</span><br><span class="line">    nodetemp = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        cin &gt;&gt; inputnum;</span><br><span class="line">        node = <span class="keyword">new</span> ListNode;</span><br><span class="line">        node-&gt;val = inputnum;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            head = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            nodetemp-&gt;next = node;</span><br><span class="line">        &#125;</span><br><span class="line">        nodetemp = node;</span><br><span class="line">        nodetemp-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ListNode::ListTravel</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;链表元素依次为：&quot;</span> ;</span><br><span class="line">    ListNode* curnode=<span class="keyword">new</span> <span class="built_in">ListNode</span>();</span><br><span class="line">    curnode = head;</span><br><span class="line">    <span class="keyword">while</span> (curnode != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        cout &lt;&lt; curnode-&gt;val&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        curnode = curnode-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//翻转链表(双指针)</span></span><br><span class="line"><span class="function">ListNode* <span class="title">ListNode::reverseList_1</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    ListNode* temp;  <span class="comment">//保存cur下一个节点</span></span><br><span class="line">    ListNode* cur = head;</span><br><span class="line">    ListNode* pre = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">        temp = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//翻转链表(递归)</span></span><br><span class="line"><span class="function">ListNode* <span class="title">ListNode::reverseList_2</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">reverse</span>(<span class="literal">NULL</span>, head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ListNode* <span class="title">ListNode::reverse</span><span class="params">(ListNode* pre, ListNode* cur)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">NULL</span>)<span class="keyword">return</span> pre;</span><br><span class="line">    ListNode* temp = cur-&gt;next;</span><br><span class="line">    cur-&gt;next = pre;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">reverse</span>(cur, pre);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表左右两两交换</span></span><br><span class="line"><span class="function">ListNode* <span class="title">ListNode::swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    ListNode* dummtyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);<span class="comment">//虚拟头节点</span></span><br><span class="line">    dummtyHead-&gt;next = head;</span><br><span class="line">    ListNode* cur = dummtyHead;</span><br><span class="line">    <span class="keyword">while</span> (cur-&gt;next != <span class="literal">NULL</span> &amp;&amp; cur-&gt;next-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ListNode* tmp = cur-&gt;next;<span class="comment">//记录临时节点</span></span><br><span class="line">        ListNode* tmp1 = cur-&gt;next-&gt;next-&gt;next;<span class="comment">//记录临时节点</span></span><br><span class="line"></span><br><span class="line">        cur-&gt;next = cur-&gt;next-&gt;next-&gt;next;<span class="comment">//第一步</span></span><br><span class="line">        cur-&gt;next-&gt;next = tmp;<span class="comment">//第二步</span></span><br><span class="line">        cur-&gt;next-&gt;next-&gt;next = tmp1;<span class="comment">//第三步</span></span><br><span class="line"></span><br><span class="line">        cur = cur-&gt;next-&gt;next;<span class="comment">//cur向后移动两位，准备下一轮交换</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummtyHead-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表长度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ListNode::ListLength</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    ListNode* cur = head;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除倒数第N个</span></span><br><span class="line"><span class="function">ListNode* <span class="title">ListNode::deletebehindN</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    ListNode* cur = head;</span><br><span class="line">    <span class="type">int</span> length = <span class="built_in">ListLength</span>(head);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length - n; i++) &#123;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除倒数第N个(双指针)</span></span><br><span class="line"><span class="function">ListNode* <span class="title">ListNode::removeNthfromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    ListNode* dummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    dummyHead-&gt;next = head;</span><br><span class="line">    ListNode* fast = dummyHead;</span><br><span class="line">    ListNode* slow = dummyHead;</span><br><span class="line">    <span class="keyword">while</span> (n-- &amp;&amp; fast != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        fast = fast-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    fast = fast-&gt;next;<span class="comment">//再往前走一步，让slow指向删除节点前一个</span></span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        fast = fast-&gt;next;</span><br><span class="line">        slow = slow-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    slow-&gt;next = slow-&gt;next-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> dummyHead-&gt;next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否有环</span></span><br><span class="line"><span class="function">ListNode* <span class="title">ListNode::ifcircle</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    ListNode* fast;</span><br><span class="line">    ListNode* slow;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    fast = slow = head;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">NULL</span> &amp;&amp; fast-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        fast = fast-&gt;next-&gt;next;</span><br><span class="line">        slow = slow-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (fast == slow) &#123;</span><br><span class="line">            ListNode* index1;</span><br><span class="line">            ListNode* index2;</span><br><span class="line">            index1 = head;</span><br><span class="line">            index2 = fast;</span><br><span class="line">            <span class="keyword">while</span> (index1 != index2) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                index1 = index1-&gt;next;</span><br><span class="line">                index2 = index2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> index2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//相交节点</span></span><br><span class="line"><span class="function">ListNode* <span class="title">ListNode::getIntersectionNode</span><span class="params">(ListNode* headA, ListNode* headB)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ListNode* curA = headA;</span><br><span class="line">    ListNode* curB = headB;</span><br><span class="line">    <span class="type">int</span> lenA = <span class="number">0</span>, lenB = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (curA != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        lenA++;</span><br><span class="line">        curA = curA-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (curB != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        lenB++;</span><br><span class="line">        curB = curB-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    curA = headA;</span><br><span class="line">    curB = headB;</span><br><span class="line">    <span class="keyword">if</span> (lenB &gt; lenA) &#123;</span><br><span class="line">        <span class="type">int</span> i = lenB - lenA;</span><br><span class="line">        <span class="keyword">while</span> (i--)</span><br><span class="line">        &#123;</span><br><span class="line">            curB = curB-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i = lenA - lenB;</span><br><span class="line">        <span class="keyword">while</span> (i--)</span><br><span class="line">        &#123;</span><br><span class="line">            curA = curA-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (curA != curB) &#123; <span class="comment">//地址相等</span></span><br><span class="line">        curA = curA-&gt;next;</span><br><span class="line">        curB = curB-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> curA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="函数列举-1"><a href="#函数列举-1" class="headerlink" title="函数列举"></a>函数列举</h4><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">ListNode::initList</span><span class="params">(ListNode* head,<span class="type">int</span> a[],<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> inputnum;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    ListNode* node;</span><br><span class="line">    ListNode* nodetemp;</span><br><span class="line">    head = <span class="literal">nullptr</span>;</span><br><span class="line">    nodetemp = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">       inputnum=a[i];</span><br><span class="line">       i++;</span><br><span class="line">        node = <span class="keyword">new</span> ListNode;</span><br><span class="line">        node-&gt;val = inputnum;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            head = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            nodetemp-&gt;next = node;</span><br><span class="line">        &#125;</span><br><span class="line">        nodetemp = node;</span><br><span class="line">        nodetemp-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">ListNode::CreatList</span><span class="params">(ListNode* head,<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;input:&quot;</span>;</span><br><span class="line">    <span class="type">int</span> inputnum; </span><br><span class="line">    ListNode* node;</span><br><span class="line">    ListNode* nodetemp;</span><br><span class="line">    head = <span class="literal">nullptr</span>;</span><br><span class="line">    nodetemp = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        cin &gt;&gt; inputnum;</span><br><span class="line">        node = <span class="keyword">new</span> ListNode;</span><br><span class="line">        node-&gt;val = inputnum;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            head = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            nodetemp-&gt;next = node;</span><br><span class="line">        &#125;</span><br><span class="line">        nodetemp = node;</span><br><span class="line">        nodetemp-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">ListNode::ListTravel</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;链表元素依次为：&quot;</span> ;</span><br><span class="line">    ListNode* curnode=<span class="keyword">new</span> <span class="built_in">ListNode</span>();</span><br><span class="line">    curnode = head;</span><br><span class="line">    <span class="keyword">while</span> (curnode != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        cout &lt;&lt; curnode-&gt;val&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        curnode = curnode-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="翻转链表-双指针"><a href="#翻转链表-双指针" class="headerlink" title="翻转链表(双指针)"></a>翻转链表(双指针)</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">ListNode::reverseList_1</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    ListNode* temp;  <span class="comment">//保存cur下一个节点</span></span><br><span class="line">    ListNode* cur = head;</span><br><span class="line">    ListNode* pre = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">        temp = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="翻转链表-递归"><a href="#翻转链表-递归" class="headerlink" title="翻转链表(递归)"></a>翻转链表(递归)</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">ListNode::reverseList_2</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">reverse</span>(<span class="literal">NULL</span>, head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ListNode* <span class="title">ListNode::reverse</span><span class="params">(ListNode* pre, ListNode* cur)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">NULL</span>)<span class="keyword">return</span> pre;</span><br><span class="line">    ListNode* temp = cur-&gt;next;</span><br><span class="line">    cur-&gt;next = pre;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">reverse</span>(cur, pre);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="链表左右两两交换"><a href="#链表左右两两交换" class="headerlink" title="链表左右两两交换"></a>链表左右两两交换</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">ListNode::swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    ListNode* dummtyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);<span class="comment">//虚拟头节点</span></span><br><span class="line">    dummtyHead-&gt;next = head;</span><br><span class="line">    ListNode* cur = dummtyHead;</span><br><span class="line">    <span class="keyword">while</span> (cur-&gt;next != <span class="literal">NULL</span> &amp;&amp; cur-&gt;next-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ListNode* tmp = cur-&gt;next;<span class="comment">//记录临时节点</span></span><br><span class="line">        ListNode* tmp1 = cur-&gt;next-&gt;next-&gt;next;<span class="comment">//记录临时节点</span></span><br><span class="line"></span><br><span class="line">        cur-&gt;next = cur-&gt;next-&gt;next-&gt;next;<span class="comment">//第一步</span></span><br><span class="line">        cur-&gt;next-&gt;next = tmp;<span class="comment">//第二步</span></span><br><span class="line">        cur-&gt;next-&gt;next-&gt;next = tmp1;<span class="comment">//第三步</span></span><br><span class="line"></span><br><span class="line">        cur = cur-&gt;next-&gt;next;<span class="comment">//cur向后移动两位，准备下一轮交换</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummtyHead-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="链表长度"><a href="#链表长度" class="headerlink" title="链表长度"></a>链表长度</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">ListNode::ListLength</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    ListNode* cur = head;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="删除倒数第N个"><a href="#删除倒数第N个" class="headerlink" title="删除倒数第N个"></a>删除倒数第N个</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">ListNode::deletebehindN</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    ListNode* cur = head;</span><br><span class="line">    <span class="type">int</span> length = <span class="built_in">ListLength</span>(head);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length - n; i++) &#123;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="删除倒数第N个-双指针"><a href="#删除倒数第N个-双指针" class="headerlink" title="删除倒数第N个(双指针)"></a>删除倒数第N个(双指针)</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">ListNode::removeNthfromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    ListNode* dummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    dummyHead-&gt;next = head;</span><br><span class="line">    ListNode* fast = dummyHead;</span><br><span class="line">    ListNode* slow = dummyHead;</span><br><span class="line">    <span class="keyword">while</span> (n-- &amp;&amp; fast != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        fast = fast-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    fast = fast-&gt;next;<span class="comment">//再往前走一步，让slow指向删除节点前一个</span></span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        fast = fast-&gt;next;</span><br><span class="line">        slow = slow-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    slow-&gt;next = slow-&gt;next-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> dummyHead-&gt;next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="判断是否有环"><a href="#判断是否有环" class="headerlink" title="判断是否有环"></a>判断是否有环</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">ListNode::ifcircle</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    ListNode* fast;</span><br><span class="line">    ListNode* slow;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    fast = slow = head;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">NULL</span> &amp;&amp; fast-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        fast = fast-&gt;next-&gt;next;</span><br><span class="line">        slow = slow-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (fast == slow) &#123;</span><br><span class="line">            ListNode* index1;</span><br><span class="line">            ListNode* index2;</span><br><span class="line">            index1 = head;</span><br><span class="line">            index2 = fast;</span><br><span class="line">            <span class="keyword">while</span> (index1 != index2) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                index1 = index1-&gt;next;</span><br><span class="line">                index2 = index2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> index2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="相交节点"><a href="#相交节点" class="headerlink" title="相交节点"></a>相交节点</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">ListNode::getIntersectionNode</span><span class="params">(ListNode* headA, ListNode* headB)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ListNode* curA = headA;</span><br><span class="line">    ListNode* curB = headB;</span><br><span class="line">    <span class="type">int</span> lenA = <span class="number">0</span>, lenB = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (curA != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        lenA++;</span><br><span class="line">        curA = curA-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (curB != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        lenB++;</span><br><span class="line">        curB = curB-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    curA = headA;</span><br><span class="line">    curB = headB;</span><br><span class="line">    <span class="keyword">if</span> (lenB &gt; lenA) &#123;</span><br><span class="line">        <span class="type">int</span> i = lenB - lenA;</span><br><span class="line">        <span class="keyword">while</span> (i--)</span><br><span class="line">        &#123;</span><br><span class="line">            curB = curB-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i = lenA - lenB;</span><br><span class="line">        <span class="keyword">while</span> (i--)</span><br><span class="line">        &#123;</span><br><span class="line">            curA = curA-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (curA != curB) &#123; <span class="comment">//地址相等</span></span><br><span class="line">        curA = curA-&gt;next;</span><br><span class="line">        curB = curB-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> curA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="移除列表元素（JAVA）"><a href="#移除列表元素（JAVA）" class="headerlink" title="移除列表元素（JAVA）"></a>移除列表元素（JAVA）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="literal">null</span> &amp;&amp; head.val == val) &#123;</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 已经为null，提前退出</span></span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 已确定当前head.val != val</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur.val == val) &#123;</span><br><span class="line">            pre.next = cur.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pre = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="设计链表（JAVA）"><a href="#设计链表（JAVA）" class="headerlink" title="设计链表（JAVA）"></a>设计链表（JAVA）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单链表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    LinkedNode next;</span><br><span class="line">    LinkedNode()&#123;&#125;</span><br><span class="line">    LinkedNode(<span class="type">int</span> val) &#123;</span><br><span class="line">        <span class="built_in">this</span>.val=val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line">  <span class="type">int</span> size;</span><br><span class="line">    LinkedNode head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">LinkedNode</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(index&gt;=size)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(index&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        index=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LinkedNode pre=head;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;=index;i++)&#123;</span><br><span class="line">        pre=pre.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        addAtIndex(<span class="number">0</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        addAtIndex(size, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">LinkedNode</span> <span class="variable">toAdd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedNode</span>(val);</span><br><span class="line">        toAdd.next = pre.next;</span><br><span class="line">        pre.next = toAdd;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        LinkedNode pre=head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;index;i++)&#123;</span><br><span class="line">            pre=pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre.next=pre.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">overTurn</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            temp = cur.next;<span class="comment">//保存下一节点</span></span><br><span class="line">            cur.next = prev;<span class="comment">//连接上一节点</span></span><br><span class="line">            prev = cur;<span class="comment">//保存当前节点</span></span><br><span class="line">            cur = temp;<span class="comment">//切换节点</span></span><br><span class="line">        &#125;</span><br><span class="line">        head.next= prev;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newnode</span> <span class="operator">=</span>head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">            newnode=newnode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        newnode.next=<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseList</span><span class="params">(ListNode Start,ListNode End)</span> &#123;</span><br><span class="line">        head.next = reverse(Start,End );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ListNode <span class="title function_">reverse</span><span class="params">(ListNode prev, ListNode cur)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> prev;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        temp = cur.next;<span class="comment">// 先保存下一个节点</span></span><br><span class="line">        cur.next = prev;<span class="comment">// 反转</span></span><br><span class="line">        <span class="comment">// 更新prev、cur位置</span></span><br><span class="line">        <span class="comment">// prev = cur;</span></span><br><span class="line">        <span class="comment">// cur = temp;</span></span><br><span class="line">        <span class="keyword">return</span> reverse(cur, temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cstdlib&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 1;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR -1;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LIST_INIT_SIZE 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LISTINCREMENT 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Status;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span> &#123;<span class="comment">//单链表</span></span><br><span class="line">ElemType data;          <span class="comment">//数据</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LNode</span>* next;     <span class="comment">//下一指针</span></span><br><span class="line">&#125;LNode, * LinkList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">DuLNode</span> &#123;<span class="comment">//双向链表</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DuLNode</span>* prior;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DuLNode</span>* next;</span><br><span class="line">&#125;DuLNode, * DiLinkList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">SeqList</span> &#123;</span><br><span class="line"><span class="type">int</span>* elem;<span class="comment">//线性表首地址</span></span><br><span class="line"><span class="type">int</span> length;<span class="comment">//长度</span></span><br><span class="line"><span class="type">int</span> listsize = LIST_INIT_SIZE;<span class="comment">//当前分配的存储空间</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="表的初始化，不带头节点，内置，顺序"><a href="#表的初始化，不带头节点，内置，顺序" class="headerlink" title="表的初始化，不带头节点，内置，顺序"></a>表的初始化，不带头节点，内置，顺序</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LinkList <span class="title">CreatSlist</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkList head = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">5</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">LinkList newhead = (LinkList)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">newhead-&gt;data = i;</span><br><span class="line">newhead-&gt;next = head;</span><br><span class="line">head = newhead;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="顺序创建，输入，n"><a href="#顺序创建，输入，n" class="headerlink" title="顺序创建，输入，n"></a>顺序创建，输入，n</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreatListno</span><span class="params">(LinkList&amp; L, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">L = (LinkList)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">LinkList nL = L;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">LinkList p = (LinkList)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p-&gt;data);</span><br><span class="line">p-&gt;next = nL-&gt;next;</span><br><span class="line">nL-&gt;next = p;</span><br><span class="line">nL = p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="逆序创建输入单链表-n"><a href="#逆序创建输入单链表-n" class="headerlink" title="逆序创建输入单链表,n"></a>逆序创建输入单链表,n</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateList</span><span class="params">(LinkList&amp; L, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">L = (LinkList)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">LinkList p = (LinkList)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp; p-&gt;data);</span><br><span class="line">p-&gt;next = L-&gt;next;</span><br><span class="line">L-&gt;next = p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a>遍历</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">travel</span><span class="params">(LinkList L)</span> </span>&#123;</span><br><span class="line">LinkList p = L-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (!p)<span class="built_in">printf</span>(<span class="string">&quot;空表&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="打印输出"><a href="#打印输出" class="headerlink" title="打印输出"></a>打印输出</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(LinkList P)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (P != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, P-&gt;data);</span><br><span class="line">P = P-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="取第i个结点元素"><a href="#取第i个结点元素" class="headerlink" title="取第i个结点元素"></a>取第i个结点元素</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">GetElem</span><span class="params">(LinkList L,<span class="type">int</span> i,ElemType &amp;e)</span> </span>&#123;</span><br><span class="line">LinkList p = L-&gt;next;</span><br><span class="line"><span class="type">int</span> j = i;</span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; j &lt; i) &#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!p || j &gt; i)<span class="keyword">return</span> ERROR;</span><br><span class="line">e = p-&gt;data;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="在第i个元素之前插入-1"><a href="#在第i个元素之前插入-1" class="headerlink" title="在第i个元素之前插入"></a>在第i个元素之前插入</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(LinkList &amp;L,<span class="type">int</span> i,ElemType e)</span> </span>&#123;</span><br><span class="line">LinkList p = L;</span><br><span class="line"><span class="type">int</span> j = i;</span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; j &lt; i<span class="number">-1</span>) &#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!p || j &lt; i - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line">LinkList q = (LinkList)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">q-&gt;data = e;</span><br><span class="line">q-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = q;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="删除data值为x的结点"><a href="#删除data值为x的结点" class="headerlink" title="删除data值为x的结点"></a>删除data值为x的结点</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ListDel_X</span><span class="params">(LinkList&amp; L, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;空表无法删除\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">LinkList p = L-&gt;next, pre_p = L;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p) &#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;data == x) &#123;</span><br><span class="line">pre_p-&gt;next = p-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">p = pre_p-&gt;next;</span><br><span class="line"><span class="comment">//p=p-&gt;next;</span></span><br><span class="line"><span class="comment">//pre_p-&gt;next=p;</span></span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">pre_p = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">flag == <span class="number">1</span> ? <span class="built_in">printf</span>(<span class="string">&quot;已删除\n&quot;</span>) : <span class="built_in">printf</span>(<span class="string">&quot;无此元素\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="删除data值为x的直接前驱结点"><a href="#删除data值为x的直接前驱结点" class="headerlink" title="删除data值为x的直接前驱结点"></a>删除data值为x的直接前驱结点</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ListDel_Xpre</span><span class="params">(LinkList&amp; L, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;空表无法删除\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">LinkList p = L-&gt;next, pre_p = L;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;data == x)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;首元素无前驱无法执行操作\n&quot;</span>);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p) &#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;data == x) &#123;</span><br><span class="line">pre_p-&gt;next = p;</span><br><span class="line">p = pre_p-&gt;next-&gt;next;</span><br><span class="line"><span class="comment">//p=p-&gt;next;</span></span><br><span class="line"><span class="comment">//pre_p-&gt;next=p;</span></span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">pre_p = pre_p-&gt;next;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">flag == <span class="number">1</span> ? <span class="built_in">printf</span>(<span class="string">&quot;已删除直接前驱\n&quot;</span>) : <span class="built_in">printf</span>(<span class="string">&quot;无此元素\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="删除第i个结点"><a href="#删除第i个结点" class="headerlink" title="删除第i个结点"></a>删除第i个结点</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">ListDelete</span><span class="params">(LinkList&amp; L, <span class="type">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class="line">LinkList p = L;</span><br><span class="line"><span class="type">int</span> j = i;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next &amp;&amp; j &lt; i - <span class="number">1</span>) &#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!p-&gt;next || j &gt; i - <span class="number">1</span>)<span class="keyword">return</span> ERROR;</span><br><span class="line">p-&gt;next = p-&gt;next-&gt;next;</span><br><span class="line"><span class="keyword">return</span> OK; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="删除最小元素结点"><a href="#删除最小元素结点" class="headerlink" title="删除最小元素结点"></a>删除最小元素结点</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">DelMinNode</span><span class="params">(LinkList&amp; head)</span> </span>&#123;</span><br><span class="line">LinkList p = head-&gt;next, pre = head;</span><br><span class="line">LinkList minp=<span class="literal">NULL</span>, minpre=<span class="literal">NULL</span>;</span><br><span class="line">ElemType min = p-&gt;data;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;data &lt; pre-&gt;data) &#123;</span><br><span class="line">min = p-&gt;data;</span><br><span class="line">minp = p;</span><br><span class="line">minpre = pre;</span><br><span class="line">&#125;</span><br><span class="line">pre = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">minpre-&gt;next = minp-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(minp);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="改造单向循环链表"><a href="#改造单向循环链表" class="headerlink" title="改造单向循环链表"></a>改造单向循环链表</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">linklist_cycle</span><span class="params">(LNode* head)</span> </span>&#123;</span><br><span class="line">LNode* p = head;</span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>)<span class="comment">//时间复杂度为O(n)为链表长度</span></span><br><span class="line">p = p-&gt;next;</span><br><span class="line">p-&gt;next = head;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="连接循环链表"><a href="#连接循环链表" class="headerlink" title="连接循环链表"></a>连接循环链表</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">merge</span><span class="params">(LNode *L1,LNode *L2)</span> </span>&#123;</span><br><span class="line">LNode* p = L1, * q = L2;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != L1)p = p-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (q-&gt;next != L2)q = q-&gt;next;</span><br><span class="line">q-&gt;next = L1;</span><br><span class="line">p-&gt;next = L2;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="顺序表逆置最小辅助空间-顺序表"><a href="#顺序表逆置最小辅助空间-顺序表" class="headerlink" title="顺序表逆置最小辅助空间(顺序表)"></a>顺序表逆置最小辅助空间(顺序表)</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">Invert_seqList</span><span class="params">(SeqList &amp;L)</span> </span>&#123;</span><br><span class="line">ElemType temp;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">temp = L.elem[i];</span><br><span class="line">L.elem[i] = L.elem[L.length - i - <span class="number">1</span>];</span><br><span class="line">L.elem[L.length - i - <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="逆置算法-三辅助"><a href="#逆置算法-三辅助" class="headerlink" title="逆置算法(三辅助)"></a>逆置算法(三辅助)</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">invent</span><span class="params">(LinkList &amp;head)</span></span>&#123;</span><br><span class="line">LinkList p, q, r;</span><br><span class="line"><span class="keyword">if</span> (!head-&gt;next)<span class="keyword">return</span> ERROR;</span><br><span class="line">p = head-&gt;next;</span><br><span class="line">q = p-&gt;next;</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (q) &#123;</span><br><span class="line">r = q;</span><br><span class="line">q = q-&gt;next;</span><br><span class="line">head-&gt;next = r;</span><br><span class="line">r-&gt;next = p;</span><br><span class="line">p = r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LinkList <span class="title">reserve</span><span class="params">(LinkList &amp;head)</span> </span>&#123;</span><br><span class="line">LinkList temp=<span class="literal">NULL</span>, phead=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</span><br><span class="line">temp = head;</span><br><span class="line">head = head-&gt;next;</span><br><span class="line">temp-&gt;next = phead;</span><br><span class="line">phead = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> phead;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="就地逆置"><a href="#就地逆置" class="headerlink" title="就地逆置"></a>就地逆置</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LinkList <span class="title">reverse_2</span><span class="params">(LinkList&amp; head)</span> </span>&#123;</span><br><span class="line">LinkList p = <span class="literal">NULL</span>,q = <span class="literal">NULL</span>;</span><br><span class="line">p = head;</span><br><span class="line">q = head-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (q != <span class="literal">NULL</span>) &#123;</span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line">q-&gt;next = head;</span><br><span class="line">head = q;</span><br><span class="line">q = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="判断回文"><a href="#判断回文" class="headerlink" title="判断回文"></a>判断回文</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">ifPalin</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line">LinkList L1,L2;</span><br><span class="line">L1 = (LinkList)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">L2 = (LinkList)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">L1-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">L2-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">LinkList nL1= L1,nL2=L2;</span><br><span class="line">LinkList p= (LinkList)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">LinkList q = (LinkList)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line"><span class="keyword">while</span> ((c=<span class="built_in">getchar</span>())!=<span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//顺序</span></span><br><span class="line">p = (LinkList)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">p-&gt;data = c;</span><br><span class="line">p-&gt;next = nL1-&gt;next;</span><br><span class="line">nL1-&gt;next = p;</span><br><span class="line">nL1 = p;</span><br><span class="line"><span class="comment">//逆序</span></span><br><span class="line">q = (LinkList)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">q-&gt;data = c;</span><br><span class="line">q-&gt;next = nL2-&gt;next;</span><br><span class="line">nL2-&gt;next = q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nL1 = L1-&gt;next;</span><br><span class="line">nL2 = L2-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (nL1!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nL1-&gt;data == nL2-&gt;data) &#123; nL1 = nL1-&gt;next; nL2 = nL2-&gt;next; &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bu是&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;是&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><p>底层容器：缺省情况下deque(双向队列)&#x2F;list&#x2F;vector</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::stack&lt;<span class="type">int</span>, std::vector&lt;<span class="type">int</span>&gt; &gt; third;  <span class="comment">// 使用vector为底层容器的栈</span></span><br><span class="line">std::queue&lt;<span class="type">int</span>, std::list&lt;<span class="type">int</span>&gt;&gt; third; <span class="comment">// 定义以list为底层容器的队列</span></span><br></pre></td></tr></table></figure><p>标准栈操作</p><p>push(x) – 将一个元素放入队列的尾部。<br>pop() – 从队列首部移除元素。<br>peek() – 返回队列首部的元素。<br>empty() – 返回队列是否为空。</p><h3 id="操作合集-用stackr容器"><a href="#操作合集-用stackr容器" class="headerlink" title="操作合集(用stackr容器)"></a>操作合集(用stackr容器)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">abb</span> &#123;</span><br><span class="line">        <span class="type">int</span> data;</span><br><span class="line">    &#125;abb;</span><br><span class="line"><span class="keyword">private</span>: string s;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//有效的括号</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">size</span>() % <span class="number">2</span> != <span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//为奇数一定不匹配</span></span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; st;</span><br><span class="line">        cout &lt;&lt; st.<span class="built_in">empty</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span>)st.<span class="built_in">push</span>(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;&#123;&#x27;</span>)st.<span class="built_in">push</span>(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;[&#x27;</span>)st.<span class="built_in">push</span>(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (st.<span class="built_in">empty</span>() || st.<span class="built_in">top</span>() != s[i])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> st.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> st.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除字符串中的所有相邻重复项</span></span><br><span class="line">    <span class="function">string <span class="title">removeDuplicates</span><span class="params">(string S)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> s : S) &#123;</span><br><span class="line">            <span class="keyword">if</span> (st.<span class="built_in">empty</span>() || s != st.<span class="built_in">top</span>()) &#123;</span><br><span class="line">                st.<span class="built_in">push</span>(s);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        string result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            result += st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(result.<span class="built_in">begin</span>(), result.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//逆波兰表达式求值</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">evalRPN</span><span class="params">(vector&lt;string&gt; &amp;s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> num1 = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> num2 = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&quot;+&quot;</span> || s[i] == <span class="string">&quot;-&quot;</span> || s[i] == <span class="string">&quot;*&quot;</span> || s[i] == <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i] == <span class="string">&quot;+&quot;</span>)st.<span class="built_in">push</span>(num1 + num2);</span><br><span class="line">                <span class="keyword">if</span> (s[i] == <span class="string">&quot;-&quot;</span>)st.<span class="built_in">push</span>(num1 - num2);</span><br><span class="line">                <span class="keyword">if</span> (s[i] == <span class="string">&quot;*&quot;</span>)st.<span class="built_in">push</span>(num1 * num2);</span><br><span class="line">                <span class="keyword">if</span> (s[i] ==<span class="string">&quot;/&quot;</span>)st.<span class="built_in">push</span>(num1 / num2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                st.<span class="built_in">push</span>(<span class="built_in">stoi</span>(s[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> result = st.<span class="built_in">top</span>();</span><br><span class="line">        st.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="操作合集（自定义结构体）"><a href="#操作合集（自定义结构体）" class="headerlink" title="操作合集（自定义结构体）"></a>操作合集（自定义结构体）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span><span class="comment">//malloc</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK  1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR -1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STACK_INIT_SIZE 100  <span class="comment">//初始分配空间</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STACKINCREMENT 10  <span class="comment">//分配增量</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Status;</span><br><span class="line"></span><br><span class="line"><span class="comment">//栈的链式实现</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">SNode</span>&#123;</span><br><span class="line">ElemType data;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SNode</span>* next;</span><br><span class="line">&#125;SNode,*StackPtr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">StackPtr top;<span class="comment">//栈顶指针</span></span><br><span class="line"><span class="type">int</span> count;  <span class="comment">//元素数</span></span><br><span class="line">&#125;LinkStack;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitStackLink</span><span class="params">(LinkStack &amp;S)</span> </span>&#123;</span><br><span class="line">S.top = <span class="literal">NULL</span>;</span><br><span class="line">S.count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">GetTopLink</span><span class="params">(LinkStack S,ElemType &amp;e)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;COUNT:%d\n&quot;</span>,S.count);</span><br><span class="line"><span class="keyword">if</span> (S.count == <span class="number">0</span>)<span class="keyword">return</span> ERROR;</span><br><span class="line">e = S.top-&gt;data;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;gettop:%d&quot;</span>,e);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">PopLink</span><span class="params">(LinkStack &amp;S,ElemType &amp;e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.count == <span class="number">0</span>)<span class="keyword">return</span> ERROR;</span><br><span class="line">e = S.top-&gt;data;</span><br><span class="line">S.top = S.top-&gt;next;</span><br><span class="line">S.count--;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">PushLink</span><span class="params">(LinkStack&amp; S, ElemType e)</span> </span>&#123;</span><br><span class="line">SNode* p = (StackPtr)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(SNode));</span><br><span class="line"><span class="keyword">if</span> (!p)<span class="built_in">printf</span>(<span class="string">&quot;ERROR\n&quot;</span>);</span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;next = S.top;</span><br><span class="line">S.top = p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;push:%d\n&quot;</span>,S.top-&gt;data);</span><br><span class="line">S.count++;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//栈的顺序实现</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">ElemType* base;<span class="comment">//存储空间基址</span></span><br><span class="line">ElemType* top;<span class="comment">//栈顶指针</span></span><br><span class="line"><span class="type">int</span> StackSize;<span class="comment">//已分配空间</span></span><br><span class="line">&#125;SqStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化操作</span></span><br><span class="line"><span class="function">Status <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span> </span>&#123;</span><br><span class="line">S.base = (ElemType*)<span class="built_in">malloc</span>(STACK_INIT_SIZE*<span class="built_in">sizeof</span>(ElemType));</span><br><span class="line"><span class="keyword">if</span> (!S.base) &#123; <span class="built_in">exit</span>(OVERFLOW); &#125;</span><br><span class="line">S.top = S.base;</span><br><span class="line">S.StackSize = STACK_INIT_SIZE;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取栈顶元素</span></span><br><span class="line"><span class="function">Status <span class="title">GetTop</span><span class="params">(SqStack S)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top == S.base)<span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">return</span> *(S.top<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进栈</span></span><br><span class="line"><span class="function">Status <span class="title">Push</span><span class="params">(SqStack&amp; S, ElemType e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top - S.base &gt;= S.StackSize) &#123;</span><br><span class="line">S.base = (ElemType*)<span class="built_in">realloc</span>(S.base, S.StackSize+STACKINCREMENT * <span class="built_in">sizeof</span>(ElemType));</span><br><span class="line"><span class="keyword">if</span> (!S.base)<span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">S.top = S.base + S.StackSize;</span><br><span class="line">S.StackSize += STACKINCREMENT;</span><br><span class="line">&#125;</span><br><span class="line">*(S.top++) = e;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function">Status <span class="title">Pop</span><span class="params">(SqStack&amp; S, ElemType&amp; e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top == S.base)<span class="keyword">return</span> ERROR;</span><br><span class="line">e = *(--S.top);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断栈空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">StackEmpty</span><span class="params">(SqStack S)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.base == S.top)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进制转换  不断取模入栈，num=num/n</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">conversion</span><span class="params">(<span class="type">int</span> num,<span class="type">int</span> n,ElemType &amp;e)</span> </span>&#123;</span><br><span class="line">ElemType temp;</span><br><span class="line">SqStack S;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (num) &#123;</span><br><span class="line"><span class="built_in">Push</span>(S, num % n);</span><br><span class="line">num = num / n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">StackEmpty</span>(S)) &#123;</span><br><span class="line"><span class="built_in">Pop</span>(S, temp);</span><br><span class="line"><span class="keyword">if</span> (flag)flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">e = temp * <span class="number">10</span> + temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;d&quot;</span>, temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否为运算符，是运算符返回1，若不是返回0</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">In</span><span class="params">(<span class="type">char</span> c)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (c) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;=&#x27;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否为数，是运算符返回1，若不是返回0</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">InNum</span><span class="params">(<span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (c &gt;= <span class="number">48</span> &amp;&amp; c &lt;= <span class="number">57</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//比较优先级</span></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">Precede</span><span class="params">(<span class="type">char</span> operate1, <span class="type">char</span> operate2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="type">char</span> pre[<span class="number">7</span>][<span class="number">7</span>] = &#123;<span class="comment">// +   -   *   /   (   )   = </span></span><br><span class="line"> &#123;<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;0&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;=&#x27;</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (operate1) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: i = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: i = <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: i = <span class="number">2</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: i = <span class="number">3</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>: i = <span class="number">4</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>: i = <span class="number">5</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;=&#x27;</span>: i = <span class="number">6</span>; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (operate2) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: j = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: j = <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: j = <span class="number">2</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: j = <span class="number">3</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>: j = <span class="number">4</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>: j = <span class="number">5</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;=&#x27;</span>: j = <span class="number">6</span>; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>(pre[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//操作</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Operate</span><span class="params">(<span class="type">int</span> a, <span class="type">char</span> operate, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (operate) &#123;</span><br><span class="line"><span class="keyword">case</span><span class="number">&#x27;</span>+<span class="string">&#x27;:return a + b;</span></span><br><span class="line"><span class="string">case&#x27;</span>-<span class="string">&#x27;:return a - b;</span></span><br><span class="line"><span class="string">case&#x27;</span>*<span class="string">&#x27;:return a * b;</span></span><br><span class="line"><span class="string">case&#x27;</span>/<span class="string">&#x27;:             //判断除数是否为0，若除数为零返回错误提示                       </span></span><br><span class="line"><span class="string">if (b != 0)</span></span><br><span class="line"><span class="string">return a / b;</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">printf(&quot;0不能作为被除数!\n&quot;);</span></span><br><span class="line"><span class="string">exit(1);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//数学表达式求值</span></span><br><span class="line"><span class="string">ElemType EvaluateExpressione(char content[]) &#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SqStack OPTR;//运算符栈</span></span><br><span class="line"><span class="string">SqStack OPND;//运算数栈；</span></span><br><span class="line"><span class="string">InitStack(OPTR);</span></span><br><span class="line"><span class="string">InitStack(OPND);</span></span><br><span class="line"><span class="string">Push(OPTR, &#x27;</span>=<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">int temp;</span></span><br><span class="line"><span class="string">int e;//存放pop操作符</span></span><br><span class="line"><span class="string">int a,b;//pop操作数</span></span><br><span class="line"><span class="string">int x, y;//存放数</span></span><br><span class="line"><span class="string">char ch;//读取内容字符</span></span><br><span class="line"><span class="string">int i = 0;//表达式数组下标</span></span><br><span class="line"><span class="string">ch = content[i];</span></span><br><span class="line"><span class="string">while (ch != &#x27;</span>=<span class="string">&#x27; || GetTop(OPTR) != &#x27;</span>=<span class="string">&#x27;) &#123;</span></span><br><span class="line"><span class="string">if (InNum(ch)) &#123;//是操作数</span></span><br><span class="line"><span class="string">x = ch - &#x27;</span><span class="number">0&#x27;</span>; </span><br><span class="line"><span class="built_in">Push</span>(OPND, x);</span><br><span class="line">y = x;</span><br><span class="line">ch = content[++i];<span class="comment">//读取下一位字符并将指针向后偏移一位</span></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">InNum</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">x = ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">y = <span class="number">10</span> * y + x;</span><br><span class="line"><span class="built_in">Pop</span>(OPND, a);</span><br><span class="line"><span class="built_in">Push</span>(OPND, y);</span><br><span class="line">ch = content[++i];<span class="comment">//读取下一位字符并将指针向后偏移一位</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">In</span>(ch)) &#123;<span class="comment">//操作符</span></span><br><span class="line"><span class="keyword">switch</span> (<span class="built_in">Precede</span>(<span class="built_in">GetTop</span>(OPTR), ch))<span class="comment">//比较ch的与OPTR栈顶元素的优先级</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span><span class="number">&#x27;</span>&lt;<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">Push(OPTR, ch);</span></span><br><span class="line"><span class="string">ch = content[++i]; //读取下一位字符并将指针向后偏移一位</span></span><br><span class="line"><span class="string">break;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">case&#x27;</span>&gt;<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">Pop(OPTR, e);</span></span><br><span class="line"><span class="string">Pop(OPND, a);</span></span><br><span class="line"><span class="string">Pop(OPND, b);</span></span><br><span class="line"><span class="string">Push(OPND, Operate(b,e,a));</span></span><br><span class="line"><span class="string">break;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">case&#x27;</span>=<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">Pop(OPTR,temp);</span></span><br><span class="line"><span class="string">ch =content[++i]; //读取下一位字符并将指针向后偏移一位</span></span><br><span class="line"><span class="string">break;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">printf(&quot;输入包含无效字符！&quot;);</span></span><br><span class="line"><span class="string">exit(1);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">return GetTop(OPND);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//数学表达式求值</span></span><br><span class="line"><span class="string">ElemType EvaluateExpressione2( ) &#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SqStack OPTR;//运算符栈</span></span><br><span class="line"><span class="string">SqStack OPND;//运算数栈；</span></span><br><span class="line"><span class="string">InitStack(OPTR);</span></span><br><span class="line"><span class="string">InitStack(OPND);</span></span><br><span class="line"><span class="string">Push(OPTR, &#x27;</span>=<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">int a, b, e,x;</span></span><br><span class="line"><span class="string">char ch = getchar();</span></span><br><span class="line"><span class="string">while (ch != &#x27;</span>=<span class="string">&#x27; || GetTop(OPTR) != &#x27;</span>=<span class="string">&#x27;) &#123;</span></span><br><span class="line"><span class="string">if (!In(ch)) &#123;//是操作数</span></span><br><span class="line"><span class="string">Push(OPND,ch);</span></span><br><span class="line"><span class="string">printf(&quot;操作数&quot;);</span></span><br><span class="line"><span class="string">ch = getchar();</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">else &#123;//操作符</span></span><br><span class="line"><span class="string">switch (Precede(GetTop(OPTR), ch))//比较ch的与OPTR栈顶元素的优先级</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">case&#x27;</span>&lt;<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">Push(OPTR, ch);</span></span><br><span class="line"><span class="string">ch = getchar();</span></span><br><span class="line"><span class="string">break;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">case&#x27;</span>&gt;<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">Pop(OPTR, e);</span></span><br><span class="line"><span class="string">Pop(OPND, a);</span></span><br><span class="line"><span class="string">Pop(OPND, b);</span></span><br><span class="line"><span class="string">Push(OPND, Operate(b, e, a));</span></span><br><span class="line"><span class="string">break;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">case&#x27;</span>=<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">Pop(OPTR, x);</span></span><br><span class="line"><span class="string">ch = getchar();</span></span><br><span class="line"><span class="string">break;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">return GetTop(OPND);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Status main() &#123;</span></span><br><span class="line"><span class="string">char content[100]; //定义一个字符数组用于存储表达式</span></span><br><span class="line"><span class="string">int result;</span></span><br><span class="line"><span class="string">int i = 0;</span></span><br><span class="line"><span class="string">do &#123;</span></span><br><span class="line"><span class="string">i = 0;</span></span><br><span class="line"><span class="string">printf(&quot;请输入表达且以=结束:\n&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">do &#123;</span></span><br><span class="line"><span class="string">content[i++] = getchar();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125; while (content[i - 1] != &#x27;</span>=<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">result = EvaluateExpressione(content);</span></span><br><span class="line"><span class="string">printf(&quot;%d\n&quot;, result);</span></span><br><span class="line"><span class="string">getchar();</span></span><br><span class="line"><span class="string">printf(&quot;请按回车以继续，若结束请输入！&quot;);</span></span><br><span class="line"><span class="string">&#125; while (getchar() != &#x27;</span>!<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Pair数据类型"><a href="#Pair数据类型" class="headerlink" title="Pair数据类型"></a>Pair数据类型</h2><h4 id="1-1-pair类型概述"><a href="#1-1-pair类型概述" class="headerlink" title="1.1 pair类型概述"></a>1.1 pair类型概述</h4><p>　　pair的功能就像它的名字一样，pair将一对值组合成一个值，这一对值可以具有不同的数据类型，两个值可以分别用pair的两个公有函数first和second访问。</p><p>　　pair类所在的头文件与命名函数是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="1-2-pair对象基本定义"><a href="#1-2-pair对象基本定义" class="headerlink" title="1.2 pair对象基本定义"></a>1.2 pair对象基本定义</h4><p>　　pair是一种模板类型，其中包含两个数据值，两个数据的类型可以不同，基本的定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;<span class="type">int</span>, string&gt; a;</span><br></pre></td></tr></table></figure><p>　　表示a中有两个类型，第一个元素是int型的，第二个元素是string类型的，如果创建pair的时候没有对其进行初始化，则调用默认构造函数对其初始化。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">pair&lt;string, string&gt; <span class="title">a</span><span class="params">(<span class="string">&quot;James&quot;</span>, <span class="string">&quot;Joy&quot;</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>　　也可以像上面一样在定义的时候直接对其初始化。<br>　　由于pair类型的使用比较繁琐，因为如果要定义多个形同的pair类型的时候，可以时候typedef简化声明：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;string, string&gt; author;</span><br><span class="line"><span class="function">author <span class="title">pro</span><span class="params">(<span class="string">&quot;May&quot;</span>, <span class="string">&quot;Lily&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">author <span class="title">joye</span><span class="params">(<span class="string">&quot;James&quot;</span>, <span class="string">&quot;Joyce&quot;</span>)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="1-3-pair对象访问"><a href="#1-3-pair对象访问" class="headerlink" title="1.3 pair对象访问"></a>1.3 pair对象访问</h4><p>　　对于pair类，由于它只有两个元素，分别名为first和second，因此直接使用普通的点操作符即可访问其成员</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">pair&lt;string, string&gt; <span class="title">a</span><span class="params">(<span class="string">&quot;Lily&quot;</span>, <span class="string">&quot;Poly&quot;</span>)</span></span>; </span><br><span class="line">string name;</span><br><span class="line">name = pair.second;</span><br></pre></td></tr></table></figure><h4 id="1-4-生成新的pair对象"><a href="#1-4-生成新的pair对象" class="headerlink" title="1.4 生成新的pair对象"></a>1.4 生成新的pair对象</h4><p>　　可以使用make_pair对已存在的两个数据构造一个新的pair类型：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">8</span>;</span><br><span class="line">string m = <span class="string">&quot;James&quot;</span>;</span><br><span class="line">pair&lt;<span class="type">int</span>, string&gt; newone;</span><br><span class="line">newone = <span class="built_in">make_pair</span>(a, m)；</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="操作合集-2"><a href="#操作合集-2" class="headerlink" title="操作合集"></a>操作合集</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Myqueue</span> &#123;  <span class="comment">//实现单调队列（从大到小）滑动窗口最大值</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">    <span class="comment">//弹出前检查是否为空且弹出元素是否为front元素</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!que.<span class="built_in">empty</span>() &amp;&amp; value == que.<span class="built_in">front</span>()) &#123;</span><br><span class="line">            que.<span class="built_in">pop_front</span>();</span><br><span class="line">        <span class="number">7</span>h77777777777777777777777777</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>() &amp;&amp; value &gt; que.<span class="built_in">back</span>()) &#123;</span><br><span class="line">            que.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        que.<span class="built_in">push_back</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">front</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> que.<span class="built_in">front</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maxSlidingwindow</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        Myqueue que;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            que.<span class="built_in">push</span>(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        result.<span class="built_in">push_back</span>(que.<span class="built_in">front</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = k; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            que.<span class="built_in">pop</span>(nums[i - k]);</span><br><span class="line">            que.<span class="built_in">push</span>(nums[i]);</span><br><span class="line">            result.<span class="built_in">push_back</span>(que.<span class="built_in">front</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">priqueue</span> &#123;<span class="comment">//前k个高频元素（优先级队列）</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 小顶堆</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">mycomparison</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; lhs, <span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; rhs)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> lhs.second &gt; rhs.second;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">topKFrequent</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 要统计元素出现频率</span></span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; map; <span class="comment">// map&lt;nums[i],对应出现的次数&gt;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            map[nums[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对频率排序</span></span><br><span class="line">        <span class="comment">// 定义一个小顶堆，大小为k</span></span><br><span class="line">        priority_queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;, mycomparison&gt; pri_que;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用固定大小为k的小顶堆，扫面所有频率的数值</span></span><br><span class="line">        <span class="keyword">for</span> (unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator it = map.<span class="built_in">begin</span>(); it != map.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">            pri_que.<span class="built_in">push</span>(*it);</span><br><span class="line">            <span class="keyword">if</span> (pri_que.<span class="built_in">size</span>() &gt; k) &#123; <span class="comment">// 如果堆的大小大于了K，则队列弹出，保证堆的大小一直为k</span></span><br><span class="line">                pri_que.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找出前K个高频元素，因为小顶堆先弹出的是最小的，所以倒序来输出到数组</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">result</span><span class="params">(k)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            result[i] = pri_que.<span class="built_in">top</span>().first;</span><br><span class="line">            pri_que.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="函数列举-2"><a href="#函数列举-2" class="headerlink" title="函数列举"></a>函数列举</h3><h4 id="滑动窗口最大值"><a href="#滑动窗口最大值" class="headerlink" title="滑动窗口最大值"></a>滑动窗口最大值</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Myqueue</span> &#123;  <span class="comment">//实现单调队列（从大到小）滑动窗口最大值</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">    <span class="comment">//弹出前检查是否为空且弹出元素是否为front元素</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!que.<span class="built_in">empty</span>() &amp;&amp; value == que.<span class="built_in">front</span>()) &#123;</span><br><span class="line">            que.<span class="built_in">pop_front</span>();</span><br><span class="line">        <span class="number">7</span>h77777777777777777777777777</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>() &amp;&amp; value &gt; que.<span class="built_in">back</span>()) &#123;</span><br><span class="line">            que.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        que.<span class="built_in">push_back</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">front</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> que.<span class="built_in">front</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maxSlidingwindow</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        Myqueue que;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            que.<span class="built_in">push</span>(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        result.<span class="built_in">push_back</span>(que.<span class="built_in">front</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = k; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            que.<span class="built_in">pop</span>(nums[i - k]);</span><br><span class="line">            que.<span class="built_in">push</span>(nums[i]);</span><br><span class="line">            result.<span class="built_in">push_back</span>(que.<span class="built_in">front</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="前k个高频元素（优先级队列）"><a href="#前k个高频元素（优先级队列）" class="headerlink" title="前k个高频元素（优先级队列）"></a>前k个高频元素（优先级队列）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">priqueue</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 小顶堆</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">mycomparison</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; lhs, <span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; rhs)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> lhs.second &gt; rhs.second;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">topKFrequent</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 要统计元素出现频率</span></span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; map; <span class="comment">// map&lt;nums[i],对应出现的次数&gt;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            map[nums[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对频率排序</span></span><br><span class="line">        <span class="comment">// 定义一个小顶堆，大小为k</span></span><br><span class="line">        priority_queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;, mycomparison&gt; pri_que;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用固定大小为k的小顶堆，扫面所有频率的数值</span></span><br><span class="line">        <span class="keyword">for</span> (unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator it = map.<span class="built_in">begin</span>(); it != map.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">            pri_que.<span class="built_in">push</span>(*it);</span><br><span class="line">            <span class="keyword">if</span> (pri_que.<span class="built_in">size</span>() &gt; k) &#123; <span class="comment">// 如果堆的大小大于了K，则队列弹出，保证堆的大小一直为k</span></span><br><span class="line">                pri_que.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找出前K个高频元素，因为小顶堆先弹出的是最小的，所以倒序来输出到数组</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">result</span><span class="params">(k)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            result[i] = pri_que.<span class="built_in">top</span>().first;</span><br><span class="line">            pri_que.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="任务点"><a href="#任务点" class="headerlink" title="任务点"></a>任务点</h3><ol><li>二叉树<li>二叉搜索树<li>avl树<li>红黑树</ol><h3 id="二叉搜索树、avl树、红黑树csdn"><a href="#二叉搜索树、avl树、红黑树csdn" class="headerlink" title="二叉搜索树、avl树、红黑树csdn"></a><a href="https://blog.csdn.net/qq_57702360/article/details/125072713">二叉搜索树、avl树、红黑树csdn</a></h3><h3 id="树的定义和基本术语"><a href="#树的定义和基本术语" class="headerlink" title="树的定义和基本术语"></a>树的定义和基本术语</h3><ul>    <li>        树的定义：n（n≥0）个结点的有限集。在任一棵非空树中：        <ol>        <li>有且仅有一个特定称为根的结点</li>        <li>n>1时,其余结点可分为m(m>0)个互不相交的有限集T1,T2,…,Tm，Ti称为树的子树。</li>        </ol>    </li>    <li>树的性质：        <ol>            <li>递归性</li>            <li>层次性</li>        </ol>    </li>    <li>树的基本术语：    <ul>        <li>树的结点：数据元素及若干指向其子树的分支</li>        <li>结点的度：结点拥有的子树的个数        </li>            <li>树的度：树中所以结点的度的最大值        </li>         <li>叶子结点（终端结点）：树中所以结点的度的最大值        </li>        <li>分支结点（非终端结点）：度大于0的结点        </li>        <li>孩子：结点的子树的根</li>        <li>双亲：B是A的孩子，则A是B的双亲</li>        <li>兄弟：同一双亲的孩子互称兄弟</li>        <li>堂兄弟：双亲在同一层的结点</li>        <li>祖先：从根到该节点所经分支上的所有结点</li>        <li>子孙：以某结点为根的子树中的任一结点都是该结点的子孙</li>        <li>结点的层次：从根结点算起，根为第一层，它的孩子为第二层...</li>        <li>树的深度：树中结点的最大层次树数</li>        <li>路径的长：从结点n1到nk的路径的长为路径上的边的条数</li>        <li>深度：对任意结点ni,ni的深度为从根到ni的唯一路径的长</li>        <li>高：从ni到一片树叶的最长路径的长</li>        <li>有序树：树中结点的各子树从左到右有次序（不能互换）</li>        <li>无序树：树中结点的各子树从左到右无次序（能互换）</li>        <li>森林：m(m>=0)棵互不相交的树的集合</li>        </ul>    </li></ul><p>​      </p><h3 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h3><ol>    <li>在二叉树的第i层上至多有2^(i-1)^个结点</li>    <li>深度为K的二叉树至多有2^K^-1个结点</li>    <li>任意一棵二叉树，终端结点数为n0,度为2的结点数为n2,则n0=n2+1</li>    <li>任意一课树，结点总数N，分支总数B，则N=B+1=n0+n1+n2....</li>    <li>有n个结点的完全二叉树的深度为[log~2~^n^]+1(下取整)</li>    <li>按层序遍历二叉树有        <ol>若i=1，无双亲；若i>1，其双亲是[i/2](下取整)</ol>        <ol>            若2i>n,为叶子结点；否则，其左孩子为2i        </ol>         <ol>            若2i+1>n,无右孩子；否则，其右孩子为2i+1        </ol>    </li></ol><h3 id="二叉树的种类"><a href="#二叉树的种类" class="headerlink" title="二叉树的种类"></a>二叉树的种类</h3><h4 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h4><p>满二叉树：如果一棵二叉树只有度为0的结点和度为2的结点，并且度为0的结点在同一层上，则这棵二叉树为满二叉树。<br><img src="https://img-blog.csdnimg.cn/20200806185805576.png"></p><h4 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h4><p>在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 h 层，则该层包含 1~ 2^(h-1)^ 个节点。<br><img src="https://img-blog.csdnimg.cn/20200920221638903.png"><br>优先级队列其实是一个堆，堆就是一棵完全二叉树，同时保证父子节点的顺序关系。</p><h4 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h4><p>二叉搜索树是一个有序树。</p><ul><li>若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；<li>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；<li>它的左、右子树也分别为二叉排序树</ul><p><img src="https://img-blog.csdnimg.cn/20200806190304693.png"></p><h4 id="平衡二叉搜索树"><a href="#平衡二叉搜索树" class="headerlink" title="平衡二叉搜索树"></a>平衡二叉搜索树</h4><p>平衡二叉搜索树：又被称为AVL（Adelson-Velsky and Landis）树，且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树<br><img src="https://img-blog.csdnimg.cn/20200806190511967.png"></p><h3 id="二叉树算法"><a href="#二叉树算法" class="headerlink" title="二叉树算法"></a>二叉树算法</h3><h4 id="二叉树结点实现（存储结构）"><a href="#二叉树结点实现（存储结构）" class="headerlink" title="二叉树结点实现（存储结构）"></a>二叉树结点实现（存储结构）</h4><h5 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_TREE_SIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> TElemType SqBTree[MAX_TREE_SIZE];</span><br><span class="line">SqBTree bt;</span><br></pre></td></tr></table></figure><p>缺点：浪费空间，始于满&#x2F;完全二叉树（要把空结点也表示出来）</p><h5 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h5><h6 id="二叉"><a href="#二叉" class="headerlink" title="二叉"></a>二叉</h6><ul><li><p>含有n个结点的二叉链表有n+1个空链域</p></li><li><p>c</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span></span><br><span class="line">    ElemType val;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br></pre></td></tr></table></figure><ul><li>c++</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(<span class="literal">NULL</span>), <span class="built_in">right</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">  TreeNode left;</span><br><span class="line">  TreeNode right;</span><br><span class="line">  TreeNode() &#123;&#125;</span><br><span class="line">  TreeNode(<span class="type">int</span> val) &#123; <span class="built_in">this</span>.val = val; &#125;</span><br><span class="line">  TreeNode(<span class="type">int</span> val, TreeNode left, TreeNode right) &#123;</span><br><span class="line">    <span class="built_in">this</span>.val = val;</span><br><span class="line">    <span class="built_in">this</span>.left = left;</span><br><span class="line">    <span class="built_in">this</span>.right = right;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="三叉"><a href="#三叉" class="headerlink" title="三叉"></a>三叉</h6><ul><li>c</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ThiTNode</span>&#123;</span></span><br><span class="line">    TElemType val;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ThiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>,*<span class="title">parent</span>;</span></span><br><span class="line">&#125;ThiTNode,*ThiTree;</span><br></pre></td></tr></table></figure><h4 id="遍历二叉树"><a href="#遍历二叉树" class="headerlink" title="遍历二叉树"></a>遍历二叉树</h4><h5 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h5><ul><li>二叉树主要有两种遍历方式：</li></ul><ol><li>深度优先遍历：先往深走，遇到叶子节点再往回走。<li>广度优先遍历：一层一层的去遍历。</ol><ul><li>深度优先遍历<ul><li>前序遍历（递归法，迭代法）<li>中序遍历（递归法，迭代法）<li>后序遍历（递归法，迭代法）</ul><li>广度优先遍历<ul><li>层次遍历（迭代法）<ul><li>前中后指中间结点的遍历顺序</li></ul><ul><li>前序遍历：中左右<li>中序遍历：左中右<li>后序遍历：左右中</ul><ul><li>实例</li></ul><p><img src="https://img-blog.csdnimg.cn/20200806191109896.png"></p><h5 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h5><h6 id="递归遍历"><a href="#递归遍历" class="headerlink" title="递归遍历"></a>递归遍历</h6><ol><li><strong>确定递归函数的参数和返回值：</strong> 确定哪些参数是递归的过程中需要处理的，那么就在递归函数里加上这个参数， 并且还要明确每次递归的返回值是什么进而确定递归函数的返回类型。</li><li><strong>确定终止条件：</strong> 写完了递归算法, 运行的时候，经常会遇到栈溢出的错误，就是没写终止条件或者终止条件写的不对，操作系统也是用一个栈的结构来保存每一层递归的信息，如果递归没有终止，操作系统的内存栈必然就会溢出。</li><li><strong>确定单层递归的逻辑：</strong> 确定每一层递归需要处理的信息。在这里也就会重复调用自己来实现递归的过程。</li></ol><ul><li>c++</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreTravesal</span><span class="params">(TreeNode* cur,vector&lt;<span class="type">int</span>&gt;&amp; result)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur==<span class="literal">NULL</span>) <span class="keyword">return</span>;<span class="comment">//终止条件</span></span><br><span class="line">    result.<span class="built_in">push</span>(cur-&gt;val);</span><br><span class="line">    <span class="built_in">PreTravesal</span>(cur-&gt;lchild,result);<span class="comment">//左孩子</span></span><br><span class="line">    <span class="built_in">PreTravesal</span>(cur-&gt;rchild,result);<span class="comment">//右孩子</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InTravesal</span><span class="params">(TreeNode* cur,vector&lt;<span class="type">int</span>&gt;&amp; result)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur==<span class="literal">NULL</span>) <span class="keyword">return</span>;<span class="comment">//终止条件</span></span><br><span class="line">    <span class="built_in">PreTravesal</span>(cur-&gt;lchild,result);<span class="comment">//左孩子</span></span><br><span class="line">    result.<span class="built_in">push</span>(cur-&gt;val);</span><br><span class="line">    <span class="built_in">PreTravesal</span>(cur-&gt;rchild,result);<span class="comment">//右孩子</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PostTravesal</span><span class="params">(TreeNode* cur,vector&lt;<span class="type">int</span>&gt;&amp; result)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur==<span class="literal">NULL</span>) <span class="keyword">return</span>;<span class="comment">//终止条件</span></span><br><span class="line">    <span class="built_in">PreTravesal</span>(cur-&gt;lchild,result);<span class="comment">//左孩子</span></span><br><span class="line">    <span class="built_in">PreTravesal</span>(cur-&gt;rchild,result);<span class="comment">//右孩子</span></span><br><span class="line">    result.<span class="built_in">push</span>(cur-&gt;val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>c</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">PreTraversal</span><span class="params">(BiTree T,Status(* Visit)(TElemType e))</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (T) &#123;</span><br><span class="line"><span class="keyword">if</span> (Visit(T-&gt;data))</span><br><span class="line"><span class="keyword">if</span> (PreTraversal(T-&gt;lchild, Visit))</span><br><span class="line"><span class="keyword">if</span> (PreTraversal(T-&gt;rchild, Visit)) <span class="keyword">return</span> OK;</span><br><span class="line"><span class="keyword">return</span> ERROR;<span class="comment">//防止Visit()返回0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status<span class="title function_">InTraversal</span><span class="params">(BiTree T, Status(*Visit)(TElemType e))</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (T) &#123;</span><br><span class="line"><span class="keyword">if</span> (InTraversal(T-&gt;lchild, Visit))</span><br><span class="line"><span class="keyword">if</span> (Visit(T-&gt;data))</span><br><span class="line"><span class="keyword">if</span> (InTraversal(T-&gt;rchild, Visit)) <span class="keyword">return</span> OK;</span><br><span class="line"><span class="keyword">return</span> ERROR;<span class="comment">//防止Visit()返回0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line">Status<span class="title function_">PostTraversal</span><span class="params">(BiTree T, Status(*Visit)(TElemType e))</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (T) &#123;</span><br><span class="line"><span class="keyword">if</span> (PostTraversal(T-&gt;lchild, Visit))</span><br><span class="line"><span class="keyword">if</span> (PostTraversal(T-&gt;rchild, Visit))</span><br><span class="line"><span class="keyword">if</span> (Visit(T-&gt;data)) <span class="keyword">return</span> OK;</span><br><span class="line"><span class="keyword">return</span> ERROR;<span class="comment">//防止Visit()返回0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="迭代遍历"><a href="#迭代遍历" class="headerlink" title="迭代遍历"></a>迭代遍历</h6><ul><li>迭代遍历（非统一）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode* root)</span> &#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;TreeNode*&gt; st;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; result;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> result;</span><br><span class="line">st.push(root);</span><br><span class="line"><span class="keyword">while</span> (!st.empty()) &#123;</span><br><span class="line">TreeNode* node = st.top();                       <span class="comment">// 中</span></span><br><span class="line">st.pop();</span><br><span class="line">result.push_back(node-&gt;val);</span><br><span class="line"><span class="keyword">if</span> (node-&gt;right) st.push(node-&gt;right);           <span class="comment">// 右（空节点不入栈）</span></span><br><span class="line"><span class="keyword">if</span> (node-&gt;left) st.push(node-&gt;left);             <span class="comment">// 左（空节点不入栈）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode* root)</span> &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; result;</span><br><span class="line"><span class="built_in">stack</span>&lt;TreeNode*&gt; st;</span><br><span class="line">TreeNode* cur = root;</span><br><span class="line"><span class="keyword">while</span> (cur != <span class="literal">NULL</span> || !st.empty()) &#123;</span><br><span class="line"><span class="keyword">if</span> (cur != <span class="literal">NULL</span>) &#123; <span class="comment">// 指针来访问节点，访问到最底层</span></span><br><span class="line">st.push(cur); <span class="comment">// 将访问的节点放进栈</span></span><br><span class="line">cur = cur-&gt;left;                <span class="comment">// 左</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cur = st.top(); <span class="comment">// 从栈里弹出的数据，就是要处理的数据（放进result数组里的数据）</span></span><br><span class="line">st.pop();</span><br><span class="line">result.push_back(cur-&gt;val);     <span class="comment">// 中</span></span><br><span class="line">cur = cur-&gt;right;               <span class="comment">// 右</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode* root)</span> &#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;TreeNode*&gt; st;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; result;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> result;</span><br><span class="line">st.push(root);</span><br><span class="line"><span class="keyword">while</span> (!st.empty()) &#123;</span><br><span class="line">TreeNode* node = st.top();</span><br><span class="line">st.pop();</span><br><span class="line">result.push_back(node-&gt;val);</span><br><span class="line"><span class="keyword">if</span> (node-&gt;left) st.push(node-&gt;left); <span class="comment">// 相对于前序遍历，这更改一下入栈顺序 （空节点不入栈）</span></span><br><span class="line"><span class="keyword">if</span> (node-&gt;right) st.push(node-&gt;right); <span class="comment">// 空节点不入栈</span></span><br><span class="line">&#125;</span><br><span class="line">reverse(result.begin(), result.end()); <span class="comment">// 将结果反转之后就是左右中的顺序了</span></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>迭代遍历（统一）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">preorderTraversalT</span><span class="params">(TreeNode* root)</span> &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; result;</span><br><span class="line"><span class="built_in">stack</span>&lt;TreeNode*&gt; st;</span><br><span class="line"><span class="keyword">if</span> (root != <span class="literal">NULL</span>) st.push(root);</span><br><span class="line"><span class="keyword">while</span> (!st.empty()) &#123;</span><br><span class="line">TreeNode* node = st.top();</span><br><span class="line"><span class="keyword">if</span> (node != <span class="literal">NULL</span>) &#123;</span><br><span class="line">st.pop();</span><br><span class="line"><span class="keyword">if</span> (node-&gt;right) st.push(node-&gt;right);  <span class="comment">// 右</span></span><br><span class="line"><span class="keyword">if</span> (node-&gt;left) st.push(node-&gt;left);    <span class="comment">// 左</span></span><br><span class="line">st.push(node);                          <span class="comment">// 中</span></span><br><span class="line">st.push(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">st.pop();</span><br><span class="line">node = st.top();</span><br><span class="line">st.pop();</span><br><span class="line">result.push_back(node-&gt;val);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">inorderTraversalT</span><span class="params">(TreeNode* root)</span> &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; result;</span><br><span class="line"><span class="built_in">stack</span>&lt;TreeNode*&gt; st;</span><br><span class="line"><span class="keyword">if</span> (root != <span class="literal">NULL</span>) st.push(root);</span><br><span class="line"><span class="keyword">while</span> (!st.empty()) &#123;</span><br><span class="line">TreeNode* node = st.top();</span><br><span class="line"><span class="keyword">if</span> (node != <span class="literal">NULL</span>) &#123;</span><br><span class="line">st.pop(); <span class="comment">// 将该节点弹出，避免重复操作，下面再将右中左节点添加到栈中</span></span><br><span class="line"><span class="keyword">if</span> (node-&gt;right) st.push(node-&gt;right);  <span class="comment">// 添加右节点（空节点不入栈）</span></span><br><span class="line"></span><br><span class="line">st.push(node);                          <span class="comment">// 添加中节点</span></span><br><span class="line">st.push(<span class="literal">NULL</span>); <span class="comment">// 中节点访问过，但是还没有处理，加入空节点做为标记。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (node-&gt;left) st.push(node-&gt;left);    <span class="comment">// 添加左节点（空节点不入栈）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">// 只有遇到空节点的时候，才将下一个节点放进结果集</span></span><br><span class="line">st.pop();           <span class="comment">// 将空节点弹出</span></span><br><span class="line">node = st.top();    <span class="comment">// 重新取出栈中元素</span></span><br><span class="line">st.pop();</span><br><span class="line">result.push_back(node-&gt;val); <span class="comment">// 加入到结果集</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">postorderTraversalT</span><span class="params">(TreeNode* root)</span> &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; result;</span><br><span class="line"><span class="built_in">stack</span>&lt;TreeNode*&gt; st;</span><br><span class="line"><span class="keyword">if</span> (root != <span class="literal">NULL</span>) st.push(root);</span><br><span class="line"><span class="keyword">while</span> (!st.empty()) &#123;</span><br><span class="line">TreeNode* node = st.top();</span><br><span class="line"><span class="keyword">if</span> (node != <span class="literal">NULL</span>) &#123;</span><br><span class="line">st.pop();</span><br><span class="line">st.push(node);                          <span class="comment">// 中</span></span><br><span class="line">st.push(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (node-&gt;right) st.push(node-&gt;right);  <span class="comment">// 右</span></span><br><span class="line"><span class="keyword">if</span> (node-&gt;left) st.push(node-&gt;left);    <span class="comment">// 左</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">st.pop();</span><br><span class="line">node = st.top();</span><br><span class="line">st.pop();</span><br><span class="line">result.push_back(node-&gt;val);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) que.<span class="built_in">push</span>(root);</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">            <span class="comment">// 这里一定要使用固定大小size，不要使用que.size()，因为que.size是不断变化的</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                TreeNode* node = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                vec.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) que.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) que.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            result.<span class="built_in">push_back</span>(vec);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"># 递归法</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">order</span><span class="params">(TreeNode* cur, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; result, <span class="type">int</span> depth)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (result.<span class="built_in">size</span>() == depth) result.<span class="built_in">push_back</span>(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        result[depth].<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line">        <span class="built_in">order</span>(cur-&gt;left, result, depth + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">order</span>(cur-&gt;right, result, depth + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="type">int</span> depth = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">order</span>(root, result, depth);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="创建二叉树"><a href="#创建二叉树" class="headerlink" title="创建二叉树"></a>创建二叉树</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先序</span></span><br><span class="line">Status <span class="title function_">PreCreateBiTree</span><span class="params">(BiTree &amp;T)</span>&#123;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch);</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">&#x27;&#x27;)T=NULL;</span></span><br><span class="line"><span class="string">    else&#123;</span></span><br><span class="line"><span class="string">        if(!(T=(BiTnode*)malloc(sizeof(TNode)))) exit(OVERFLOW);</span></span><br><span class="line"><span class="string">        T-&gt;data=ch;//中</span></span><br><span class="line"><span class="string">       PreCreateBiTree(T-&gt;lchild);//左</span></span><br><span class="line"><span class="string">        PreCreateBiTree(T-&gt;rchild);//右</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    return OK;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="翻转二叉树"><a href="#翻转二叉树" class="headerlink" title="翻转二叉树"></a>翻转二叉树</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">invertTree</span><span class="params">(TreeNode* root)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    swap(root-&gt;lchild,root-&gt;rchild);</span><br><span class="line">    invertTree(root-&gt;lchild);</span><br><span class="line">    invertTree(root-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(TreeNode* lchild,TreeNode* rchild)</span>&#123;</span><br><span class="line">    TreeNode* temp;</span><br><span class="line">    temp=lchild;</span><br><span class="line">    lchild=rchild;</span><br><span class="line">    rchild=temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="对称二叉树"><a href="#对称二叉树" class="headerlink" title="对称二叉树"></a>对称二叉树</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(TreeNode* L,TreeNode* R)</span></span>&#123;</span><br><span class="line"><span class="comment">//都空</span></span><br><span class="line">    <span class="keyword">if</span>(L==<span class="literal">NULL</span>&amp;&amp;R==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//左空右不空</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(L==<span class="literal">NULL</span>&amp;&amp;R!=<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//右空左不空</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(R==<span class="literal">NULL</span>&amp;&amp;L!=<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//左右不空且不等</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(L!=R) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//接下来就是左右都有值且相等</span></span><br><span class="line">    <span class="type">bool</span> l=<span class="built_in">compare</span>(L-&gt;lchild,R-&gt;rchild);<span class="comment">//左子树：左 ；右子树：右</span></span><br><span class="line">    <span class="type">bool</span> r=<span class="built_in">compare</span>(L-&gt;rchild,R-&gt;lchild);<span class="comment">//左子树：右 ；右子树：左</span></span><br><span class="line">    <span class="type">bool</span> isSame=l&amp;&amp;r; <span class="comment">//中</span></span><br><span class="line">    <span class="keyword">return</span> isSame；</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="built_in">isduic</span>(TreeNode* root)&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">compare</span>(root-&gt;lchild,root-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="统计叶子结点个数"><a href="#统计叶子结点个数" class="headerlink" title="统计叶子结点个数"></a>统计叶子结点个数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">CountLeaf</span><span class="params">(BiTree T,<span class="type">int</span>&amp; count)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T)&#123;</span><br><span class="line">        <span class="keyword">if</span>((T-&gt;lchild==<span class="literal">NULL</span>)&amp;&amp;(T-&gt;rchild==<span class="literal">NULL</span>))&#123;count++;<span class="keyword">return</span> OK;&#125;</span><br><span class="line">        CountLeaf(T-&gt;lchild,count); <span class="comment">//访问左</span></span><br><span class="line">        CountLeaf(T-&gt;rchild,count); <span class="comment">//访问右</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求二叉树的深度"><a href="#求二叉树的深度" class="headerlink" title="求二叉树的深度"></a>求二叉树的深度</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Depth</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> d=<span class="number">0</span>,dl=<span class="number">0</span>,dr=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(!T) d=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        dl=<span class="built_in">Depth</span>(T-&gt;lchild);</span><br><span class="line">        dr=<span class="built_in">Depth</span>(T-&gt;rchild);</span><br><span class="line">        d=<span class="number">1</span>+<span class="built_in">max</span>(dl,dr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="求二叉树的最小深度"><a href="#求二叉树的最小深度" class="headerlink" title="求二叉树的最小深度"></a>求二叉树的最小深度</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">getDepth</span><span class="params">(TreeNode* node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> leftDepth = <span class="built_in">getDepth</span>(node-&gt;left);           <span class="comment">// 左</span></span><br><span class="line">    <span class="type">int</span> rightDepth = <span class="built_in">getDepth</span>(node-&gt;right);         <span class="comment">// 右</span></span><br><span class="line">                                                    <span class="comment">// 中</span></span><br><span class="line">    <span class="comment">// 当一个左子树为空，右不为空，这时并不是最低点</span></span><br><span class="line">    <span class="keyword">if</span> (node-&gt;left == <span class="literal">NULL</span> &amp;&amp; node-&gt;right != <span class="literal">NULL</span>) &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + rightDepth;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="comment">// 当一个右子树为空，左不为空，这时并不是最低点</span></span><br><span class="line">    <span class="keyword">if</span> (node-&gt;left != <span class="literal">NULL</span> &amp;&amp; node-&gt;right == <span class="literal">NULL</span>) &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + leftDepth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> result = <span class="number">1</span> + <span class="built_in">min</span>(leftDepth, rightDepth);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求完全二叉树结点个数"><a href="#求完全二叉树结点个数" class="headerlink" title="求完全二叉树结点个数"></a>求完全二叉树结点个数</h4><p><strong>普通二叉树逻辑，按后序遍历</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">getNodesNum</span><span class="params">(TreeNode* T)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,ln,rn;</span><br><span class="line">    <span class="keyword">if</span>(!T)  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        ln=<span class="built_in">getNodesNum</span>(T-&gt;lchild);</span><br><span class="line">        rn=<span class="built_in">getNodesNum</span>(T-&gt;rchild);</span><br><span class="line">        n=ln+rn+<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">getNodesNum</span><span class="params">(TreeNode* T,<span class="type">int</span> &amp;count)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T)&#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="built_in">getNodesNum</span>(T-&gt;lchild,count);</span><br><span class="line">        <span class="built_in">getNodesNum</span>(R-&gt;lchild,count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>完全二叉树逻辑，求每个子树的满二叉树</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">getNodesNum</span><span class="params">(TreeNode*T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!T)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ldeep=<span class="number">0</span>,rdeep=<span class="number">0</span>;</span><br><span class="line">    TreeNode* lt=T-&gt;lchild;</span><br><span class="line">    TreeNode* rt=T-&gt;rchild;</span><br><span class="line">    <span class="keyword">while</span>(lt)&#123;</span><br><span class="line">        lt=lt-&gt;lchild;</span><br><span class="line">        ldeep++;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">while</span>(rt)&#123;</span><br><span class="line">        rt=rt-&gt;rchild;</span><br><span class="line">        rdeep++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ldeep==rdeep)&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">2</span>&lt;&lt;ldeep)<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">getNodesNum</span>(T-&gt;lchild)+<span class="built_in">getNodesNum</span>(T-&gt;rchild)+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="判断平衡二叉树"><a href="#判断平衡二叉树" class="headerlink" title="判断平衡二叉树"></a>判断平衡二叉树</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">getHeight</span><span class="params">(TreeNode* T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!T)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> leftHeight=<span class="built_in">getHeight</span>(T-&gt;lchild);</span><br><span class="line">    <span class="keyword">if</span>(leftHeight==<span class="number">-1</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> rightHeight=<span class="built_in">getHeight</span>(T-&gt;rchild);</span><br><span class="line">    <span class="keyword">if</span>(rightHeight==<span class="number">-1</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(leftHeight-rightHeight)&gt;<span class="number">1</span>?<span class="number">-1</span>: <span class="number">1</span>+<span class="built_in">max</span>(leftHeight,rightHeight);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Boolean <span class="title">ifph</span><span class="params">(TreeNode* T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">getHeight</span>(T)==<span class="number">-1</span>?<span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="求根节点到叶子节点的所有路径"><a href="#求根节点到叶子节点的所有路径" class="headerlink" title="求根节点到叶子节点的所有路径"></a>求根节点到叶子节点的所有路径</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">traversal</span><span class="params">(TreeNode* T,vector&lt;<span class="type">int</span>&gt;&amp; path,vector&lt;string&gt;&amp; result)</span></span>&#123;</span><br><span class="line">             path.<span class="built_in">push_back</span>(T-&gt;val);</span><br><span class="line">            <span class="keyword">if</span>(T-&gt;lchild==<span class="literal">NULL</span>&amp;&amp;T-&gt;rchild==<span class="literal">NULL</span>)&#123;</span><br><span class="line">               string spath;</span><br><span class="line">              <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;path.<span class="built_in">size</span>()<span class="number">-1</span>;i++)&#123;</span><br><span class="line">                 spath=path[i].<span class="built_in">toString</span>();</span><br><span class="line">                  spath+=<span class="string">&quot;-&gt;&quot;</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">             spath+=path[path.<span class="built_in">szie</span>()<span class="number">-1</span>];</span><br><span class="line">              reslut.<span class="built_in">push_back</span>(spath);</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">             <span class="keyword">if</span>(T-&gt;lchild)&#123;</span><br><span class="line">               <span class="built_in">Traversal</span>(T-&gt;lchild,path,reslut);</span><br><span class="line">                path.<span class="built_in">pop_back</span>();</span><br><span class="line">              &#125;</span><br><span class="line">             <span class="keyword">if</span>(T-&gt;rchild)&#123;</span><br><span class="line">               <span class="built_in">Traversal</span>(T-&gt;rchild,path,reslut);</span><br><span class="line">              path.<span class="built_in">pop_back</span>();</span><br><span class="line">                 &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">vector&lt;string&gt; <span class="title">binaryTreePaths</span><span class="params">(TreeNode* T)</span></span>&#123;</span><br><span class="line">            vector&lt;string&gt; result;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">            <span class="keyword">if</span>(T==<span class="literal">NULL</span>)<span class="keyword">return</span> result;</span><br><span class="line">            <span class="built_in">traversal</span>(T,path,result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="左叶子之和"><a href="#左叶子之和" class="headerlink" title="左叶子之和"></a>左叶子之和</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">leftCount</span><span class="params">(TreeNod *T)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!T)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(T-&gt;left&amp;&amp;!T-&gt;left-&gt;left&amp;&amp;!T-&gt;right-&gt;right)&#123;<span class="comment">//是左叶子</span></span><br><span class="line">            <span class="type">int</span> left= T-&gt;left-&gt;val;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;left)&#123;</span><br><span class="line">            <span class="type">int</span> left= <span class="built_in">leftCount</span>(T-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">            <span class="type">int</span> right= <span class="built_in">leftCount</span>(T-&gt;right);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> left+right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumOfLeftLeaves</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left == <span class="literal">NULL</span> &amp;&amp; root-&gt;right== <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> leftValue = <span class="built_in">sumOfLeftLeaves</span>(root-&gt;left);    <span class="comment">// 左</span></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left &amp;&amp; !root-&gt;left-&gt;left &amp;&amp; !root-&gt;left-&gt;right) &#123; <span class="comment">// 左子树就是一个左叶子的情况</span></span><br><span class="line">            leftValue = root-&gt;left-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> rightValue = <span class="built_in">sumOfLeftLeaves</span>(root-&gt;right);  <span class="comment">// 右</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> sum = leftValue + rightValue;               <span class="comment">// 中</span></span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="求树最左边的值"><a href="#求树最左边的值" class="headerlink" title="求树最左边的值"></a>求树最左边的值</h4><p><strong>递归法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="type">int</span> maxDepth=INT_MIN;</span><br><span class="line">        <span class="type">int</span> result;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">travesal</span><span class="params">(TreeNode* T,<span class="type">int</span> depth)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(T-&gt;left==<span class="literal">NULL</span>&amp;&amp;T-&gt;right==<span class="literal">NULL</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(depth&gt;maxDepth)&#123;</span><br><span class="line">                    result=T-&gt;val;</span><br><span class="line">                    maxDepth=depth;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(T-&gt;left)&#123;</span><br><span class="line">                <span class="built_in">travesal</span>(T-&gt;left,depth+<span class="number">1</span>);<span class="comment">//隐藏回溯</span></span><br><span class="line">            &#125;</span><br><span class="line">             <span class="keyword">if</span>(T-&gt;left)&#123;</span><br><span class="line">                <span class="built_in">travesal</span>(T-&gt;left,depth+<span class="number">1</span>);<span class="comment">//隐藏回溯</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">findBottomLeftValue</span><span class="params">(TreeNode* T)</span></span>&#123;</span><br><span class="line">            <span class="built_in">travesal</span>(T,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>迭代层序遍历</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">findBottomLeftValue</span><span class="params">(TreeNode* T)</span></span>&#123;</span><br><span class="line">            queue&lt;TreeNode*&gt;que;</span><br><span class="line">            <span class="keyword">for</span>(roo!=<span class="literal">NULL</span>)que.<span class="built_in">push</span>(T);</span><br><span class="line">            <span class="type">int</span> reuslt=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(!qy=ue.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                <span class="type">int</span> size=que,<span class="built_in">size</span>();</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&gt;size;i++)&#123;</span><br><span class="line">                    TreeNode* node=que.<span class="built_in">front</span>();</span><br><span class="line">                    que.<span class="built_in">pop</span>();</span><br><span class="line">                    <span class="keyword">if</span>(i==<span class="number">0</span>)result=node-&gt;val;</span><br><span class="line">                    <span class="keyword">if</span>(node-&gt;left)que.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                    <span class="keyword">if</span>(node-&gt;right)que.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h3><h3 id="AVL定义"><a href="#AVL定义" class="headerlink" title="AVL定义"></a>AVL定义</h3><p>AVL树是带有平衡条件的二叉查找树，即每一个结点的左右子树的高度最多差1的二叉查找树（空树高定义为-1）</p><h3 id="AVL具体算法"><a href="#AVL具体算法" class="headerlink" title="AVL具体算法"></a>AVL具体算法</h3><h4 id="结点声明"><a href="#结点声明" class="headerlink" title="结点声明"></a>结点声明</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">AvlNode</span></span><br><span class="line">&#123;</span><br><span class="line">    ElemType element;</span><br><span class="line">    AvlNode *left;</span><br><span class="line">    AvlNode *right;</span><br><span class="line">    <span class="type">int</span> height;</span><br><span class="line">    <span class="built_in">AvlNode</span>(<span class="type">const</span> ElemType &amp;element,AvlNode *lt,AvlNode *rt,<span class="type">int</span> h=<span class="number">0</span>):<span class="built_in">element</span>(element),<span class="built_in">left</span>(lt),<span class="built_in">right</span>(rt),<span class="built_in">height</span>(h)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="返回结点高度"><a href="#返回结点高度" class="headerlink" title="返回结点高度"></a>返回结点高度</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">height</span><span class="params">(AvlNode *t)</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t==<span class="literal">NULL</span> ? <span class="number">-1</span>:t-&gt;height;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单旋转"><a href="#单旋转" class="headerlink" title="单旋转"></a>单旋转</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotateWithLeftChild</span><span class="params">(AvlNode *k2)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><h3 id="图的定义和术语"><a href="#图的定义和术语" class="headerlink" title="图的定义和术语"></a>图的定义和术语</h3><pre><code>图G是由一个顶点集V和一个边集E构成的数据结构。记为二元组形式： G= (V, E)其中:V是由顶点构成的非空有限集合，记为：V＝&#123;V0, V1, V2, …Vn-1&#125;E是由V中顶点的对偶构成的有限集合，记为：E=&#123;(V0, V2), (V3, V4), … &#125;，若E为空，则图中只有顶点而没有边。有向图弧、弧尾或初始点、弧头或终端点无向图的定义和术语子图: G =(V,  E)，G’= (V’,  E’)，若V’    V，E’   E，G’是G的子图邻接点: 如果边(v, v’)∈E，v和v’互为邻接点依附（相关联): 边(v，v’)依附于顶点v和v’。顶点v的度: 和v相关联的边的数目。记为TD(v)有向图的定义和术语邻接到：弧&lt;v,v’&gt; ∈E，称v邻接到v’，v’邻接自v顶点v的入度：以顶点v为头的弧的数目，记为ID（v）顶点v的出度：以顶点v为尾的弧的数目，记为OD（v）顶点v的度：TD(v)= ID(v)+ OD(v)一个有n个顶点和e条边或弧的图，满足：e=sum(TD(v))/2路径、回路和路径长度在无向图G中，若存在一个顶点序列(Vp , Vi1 , Vi2 , … , Vin , Vq)，使(Vp, Vi1)，(Vi1, Vi2)，…，(Vin, Vq)均为图G的边，则该称顶点的序列为顶点Vp到顶点Vq的路径。若G是有向图，则路径是有向的。路径长度定义为路径上的边数或者弧的数目。若一条路径中不出现重复顶点，则称此路径为简单路径。若一条路径的起点和终点相同（Vp=Vq）称为回路或环。除了起点和终点相同外，其余顶点不相同的回路，称为简单回路或简单环。无向图的连通性连通：顶点v至v’ 之间有路径存在。连通图：无向图 G 的任意两点之间都连通。连通分量：无向图的极大连通子图。有向图的连通性连通：顶点v至v’ 之间有路径存在。强连通图：有向图G的任意两点之间都连通。强连通分量：有向图的极大连通子图。无向图的生成树无向图生成树：图的极小连通子图。包含图的n个结点和n-1条边  1、一棵有n个顶点的生成树有且仅有n-1条边  2、一个无向图有n个顶点和小于n-1条边，是非连通图  3、一个无向图有多于n-1条边，必有环有向图的生成森林有向树：如果一个有向图恰有一个顶点入度为0，其余顶点入度均为1，则是有向树。 有向图的生成森林：由若干有向树组成，含有图中全部顶点，但只有足以构成若干棵不相交的有向树的弧。完全图在图G中：若G为无向图，任意两个顶点之间都有一条边，称G为无向完全图。顶点数为n，无向完全图的边数：e=n(n-1)/2若G为有向图，任意两个顶点之间都有弧，称G为有向完全图。顶点数为n，有向完全图的弧数：e=n(n-1)稀疏图(sparse graph)：有很少条边或弧(e&lt;nlog2n)的图。稠密图(dense graph)：有很多条边或弧(e&gt;nlog2n)的图。边或弧的权值(weight)：与弧或边相关的数。可以表示从一个顶点到另一个顶点的距离、花费的代价、所需的时间等。网络(network)：带权的图称之为网络。</code></pre><p>​                         </p><h3 id="图的存储结构"><a href="#图的存储结构" class="headerlink" title="图的存储结构"></a>图的存储结构</h3><h4 id="数组-邻接矩阵-表示法"><a href="#数组-邻接矩阵-表示法" class="headerlink" title="数组(邻接矩阵)表示法"></a>数组(邻接矩阵)表示法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_VERTEX_NUM 20</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123;DG,DN,UDG,UDN&#125; GraphKind</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">ArcCell</span>&#123;</span><br><span class="line">    <span class="type">int</span> adj;</span><br><span class="line">&#125;ArcCell,AdjMatrix[MAX_VERTEX_NUM][MAX_VERTEX_NUM];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">int</span> vex[MAX_VERTEX_NUM];</span><br><span class="line">    AdjMatrix arcs;</span><br><span class="line">    <span class="type">int</span> vexnum,arcnum;</span><br><span class="line">    GraphKind kind;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_VERTEX_NUM 20</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> infoType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">ArcNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> adjvex; <span class="comment">//邻接下标,当前表结点</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ArcNode</span> *nextrac;<span class="comment">//下一邻接结点</span></span><br><span class="line">    infoType info;<span class="comment">//边权值</span></span><br><span class="line">&#125;ArcNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">VNode</span>&#123;</span><br><span class="line">ArcNode *firstarc;</span><br><span class="line"><span class="type">int</span> data;<span class="comment">//有关信息</span></span><br><span class="line">&#125;VNode,AdjList[MAX_VERTEX_NUM];</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    AdjList vertices;<span class="comment">//头结点数组</span></span><br><span class="line">    <span class="type">int</span> vexnum,arcnum;</span><br><span class="line">    <span class="type">int</span> kind;</span><br><span class="line">&#125;ALGraph;</span><br></pre></td></tr></table></figure><h5 id="构造无向图UDG-邻接矩阵"><a href="#构造无向图UDG-邻接矩阵" class="headerlink" title="构造无向图UDG(邻接矩阵)"></a>构造无向图UDG(邻接矩阵)</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">creatUDG</span><span class="params">(MGraph &amp;G)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d,%d&quot;</span>,&amp;G.vexnum,&amp;G.arcnum);<span class="comment">//读入顶点、边数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;G.vexnum;i++&gt;)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;G.vex[i]);<span class="comment">//构造顶点数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;G.vexnum;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;G.vexnum;i++&gt;)</span><br><span class="line">            G.vertices[i][j]=&#123;<span class="number">0</span>,<span class="literal">NULL</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;G.arcnum;k++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d,%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        i=<span class="built_in">LocateVex</span>(G,a);</span><br><span class="line">        j=<span class="built_in">LocateVex</span>(G,b);</span><br><span class="line">        G.arcs[i][j].adj=<span class="number">1</span>;</span><br><span class="line">        G.arcs[i][j].adj=G.arcs[j][i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="构造无向图UDG-邻接表"><a href="#构造无向图UDG-邻接表" class="headerlink" title="构造无向图UDG(邻接表)"></a>构造无向图UDG(邻接表)</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">creatNG</span><span class="params">(ALGraph &amp;G)</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d,%d&quot;</span>,&amp;G.vexnum,&amp;G.arcnum);<span class="comment">//读入顶点、边数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;G.vexnum;i++)&#123;<span class="comment">//读入顶点值</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;G.vertices[i].data);</span><br><span class="line">    G.vertices[i].firstarc=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G.arcnum;i++)&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d,%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    p=(ArcNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(ArcNode));</span><br><span class="line">    q=(ArcNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(ArcNode));</span><br><span class="line">    p-&gt;adjvex=a;q-&gt;adjvex=b;</span><br><span class="line">    p-&gt;nextarc=G.vertices[b].firstrac;G.vertices[b].firstrac=p;<span class="comment">//&lt;b,a&gt;</span></span><br><span class="line">    q-&gt;nextarc=G.vertices[a].firstrac;G.vertices[a].firstrac=q;<span class="comment">//&lt;a,b&gt;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历-2"><a href="#遍历-2" class="headerlink" title="遍历"></a>遍历</h3><h4 id="深度优先遍历时间复杂度分析"><a href="#深度优先遍历时间复杂度分析" class="headerlink" title="深度优先遍历时间复杂度分析"></a>深度优先遍历时间复杂度分析</h4><p>当用邻接表时，时间复杂度O(n+e),遍历所有顶点O(n),查找所有顶点的邻接点O(e)<br>当用邻接矩阵时，时间复杂度O(n<em>n),遍历所有顶点O(n),查找一个顶点的邻接点O(n),查找所有顶点的邻接点O(n</em>n)</p><h4 id="深度优先搜索-递归"><a href="#深度优先搜索-递归" class="headerlink" title="深度优先搜索(递归)"></a>深度优先搜索(递归)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">Boolean visited[MAX];<span class="comment">//是否已被访问</span></span><br><span class="line"><span class="built_in">Status</span>(*VisitFunc)(<span class="type">int</span> v); </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFSTraverse</span><span class="params">(Graph G,Status(*Visit)(<span class="type">int</span> v))</span></span>&#123;</span><br><span class="line">    VisitFunc=Visit;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v=<span class="number">0</span>;v&lt;G.vexnum;++v) visited[v]=FLASE;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v=<span class="number">0</span>;v&lt;G.vexnum;++v)</span><br><span class="line">    <span class="keyword">if</span>(!visited[v])<span class="built_in">DFS</span>(G,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">()</span></span>&#123;</span><br><span class="line">    visited[v]=TRUE;<span class="built_in">VisitFunc</span>(v);</span><br><span class="line">    <span class="keyword">for</span>(w=<span class="built_in">FirstAdjVex</span>(G,v);w;w=<span class="built_in">NextAdjVex</span>(G,v,w))</span><br><span class="line">    <span class="keyword">if</span>(!visited[w])<span class="built_in">DFS</span>(G,w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Boolean visited[MAX];</span><br><span class="line"><span class="built_in">Status</span> (*VisitFunc)(<span class="type">int</span> v);</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFSTraverse</span><span class="params">(Graph G,Status(*Vistit)(<span class="type">int</span> v))</span></span>&#123;</span><br><span class="line">    VisitFunc=Visit;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;G.vexnum;i++)visited[i]=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;G.vexnum;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[i])<span class="built_in">GFS</span>(G,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GFS</span><span class="params">(Graph G,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">    visited[v]=<span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">VisitedFunc</span>(v);<span class="comment">//访问</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> w=<span class="built_in">FirstAdjVex</span>(G,v);w;w=<span class="built_in">NextAdjVex</span>(G,v,w))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[w])<span class="built_in">GFS</span>(G,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">FirstAdjVex</span><span class="params">(Graph G,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> G.vertices[v].firstarc-&gt;adjvex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">NextAdjVex</span><span class="params">(Graph G,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">    p=(ArcNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(ArcNode));</span><br><span class="line">    p=G.vertices[v].firstarc;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;adjvex!=w)&#123;</span><br><span class="line">        p=p-&gt;nextarc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p-&gt;nextarc-&gt;adjvex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="深度优先遍历（非递归）"><a href="#深度优先遍历（非递归）" class="headerlink" title="深度优先遍历（非递归）"></a>深度优先遍历（非递归）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">Boolean visited[MAX];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GFS</span><span class="params">(Graph p,Status(*Visit)(<span class="type">int</span> v))</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;G.vexnum;i++)visited[i]=<span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">    cur=(ArcNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(ArcNode));</span><br><span class="line">    cur=G.vertices[<span class="number">0</span>].firstarc;</span><br><span class="line">    Stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    <span class="built_in">Visit</span>(p);</span><br><span class="line">    visited[p]=<span class="literal">true</span>;</span><br><span class="line">    s.<span class="built_in">push</span>(p);</span><br><span class="line">    <span class="keyword">while</span>(!s.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="keyword">for</span>(p=cur-&gt;adjvex;visited[p]&amp;&amp;cur!=null;cur=cur-&gt;nextarc,p=cur-&gt;adjvex)&#123;&#125;</span><br><span class="line">            <span class="keyword">if</span>(cur==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">            cur=G.vertices[s.<span class="built_in">top</span>()].firstarc;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">Visit</span>(p);</span><br><span class="line">        visited[p]=<span class="literal">true</span>;</span><br><span class="line">        s.<span class="built_in">push</span>(p);</span><br><span class="line">        cur=G.vertices[p].firsttarc;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFStraverse</span><span class="params">(Graph G,Status(*Visit)(<span class="type">int</span> v))</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> v=<span class="number">0</span>;v&lt;G.vexnum;v++)visited[v]=<span class="literal">false</span>;</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="type">int</span> u,w;</span><br><span class="line"><span class="keyword">for</span>(v=<span class="number">0</span>;v&lt;G.vexnum;v++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!visited[v])&#123;</span><br><span class="line">        <span class="built_in">Visit</span>(v);visited[v]=<span class="literal">true</span>;s.<span class="built_in">push</span>(v);</span><br><span class="line">        <span class="keyword">while</span>(!s.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">for</span>(w=<span class="built_in">FirstAdjVex</span>(G,u);w;w=<span class="built_in">NextAdjVex</span>(G,u,w))&#123;</span><br><span class="line">                <span class="keyword">if</span>(!visited[u])&#123;</span><br><span class="line">                <span class="built_in">Visit</span>(v);visited[v]=<span class="literal">true</span>;s.<span class="built_in">push</span>(v);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!w)&#123;s.<span class="built_in">pop</span>();&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="广度优先时间复杂度分析"><a href="#广度优先时间复杂度分析" class="headerlink" title="广度优先时间复杂度分析"></a>广度优先时间复杂度分析</h4><p>图的遍历本质上都是对每个顶点查找邻接点的过程，所以时间复杂度同深度遍历</p><h4 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFStraverse</span><span class="params">(Graph G,Status(*Visit)(<span class="type">int</span> v))</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> v=<span class="number">0</span>;v&lt;G.vexnum;v++)visited[v]=<span class="literal">false</span>;</span><br><span class="line"><span class="built_in">InitQueue</span>(Q);</span><br><span class="line"><span class="type">int</span> u,w;</span><br><span class="line"><span class="keyword">for</span>(v=<span class="number">0</span>;v&lt;G.vexnum;v++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!visited[v])&#123;</span><br><span class="line">        <span class="built_in">Visit</span>(v);visited[v]=<span class="literal">true</span>;<span class="built_in">EnQueue</span>(Q,v);</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">QueueEmpty</span>(Q))&#123;</span><br><span class="line">            <span class="built_in">DeQueue</span>(Q,u);</span><br><span class="line">            <span class="keyword">for</span>(w=<span class="built_in">FirstAdjVex</span>(G,u);w;w=<span class="built_in">NextAdjVex</span>(G,u,w))&#123;</span><br><span class="line">                <span class="keyword">if</span>(!visited[u])&#123;</span><br><span class="line">                 <span class="built_in">Visit</span>(v);visited[v]=<span class="literal">true</span>;<span class="built_in">EnQueue</span>(Q,v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求无向图连通分支数量"><a href="#求无向图连通分支数量" class="headerlink" title="求无向图连通分支数量"></a>求无向图连通分支数量</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(Graph G)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;G.vexnum;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(visited[i]==<span class="number">0</span>)&#123;</span><br><span class="line">        k++;</span><br><span class="line">    <span class="built_in">DFS</span>(G,visit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h4><h5 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span>&#123;</span><br><span class="line">    vertexType adjvex;<span class="comment">//顶点下标</span></span><br><span class="line">    <span class="type">int</span> lowcost;<span class="comment">//最小权值</span></span><br><span class="line">&#125;closedge[MAXA];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MiniSpanTree</span><span class="params">(MGrap G,VexType u)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> k=<span class="built_in">LocateVex</span>(u);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;vexnum;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i!=k)</span><br><span class="line">            closedge[i]=&#123;k,G.arcs[k][i].adj&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    closege[k].lowcost=<span class="number">0</span>;<span class="comment">//以0判断是否纳入</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;vexnum;i++)&#123;</span><br><span class="line">        k=<span class="built_in">Mini</span>(closedge);<span class="comment">//找到与以纳入顶点的最路径</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c-&gt;%c&quot;</span>,closedge[k].adjvex,G.vex[k])<span class="comment">//输出一条边</span></span><br><span class="line">        closedge[k].lowcost=<span class="number">0</span>;<span class="comment">//纳入</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;vexnum;j++)&#123;<span class="comment">//更新closedge</span></span><br><span class="line">            <span class="keyword">if</span>(G.arcs[k][j].adj&lt;closedge[j].lowcost)</span><br><span class="line">                closedge[j]=&#123;G.vex[k],G.arcs[k][j].adj&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="kruscal算法"><a href="#kruscal算法" class="headerlink" title="kruscal算法"></a>kruscal算法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">kruskal</span><span class="params">(Edge E[],<span class="type">int</span> n,<span class="type">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="type">int</span> i,j,m1,m2,sn1,sn2,k,sum=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> vset[n+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) <span class="comment">//初始化辅助数组 </span></span><br><span class="line">vset[i]=i;</span><br><span class="line">k=<span class="number">1</span>;<span class="comment">//表示当前构造最小生成树的第k条边，初值为1 </span></span><br><span class="line">  j=<span class="number">0</span>;<span class="comment">//E(边集)中边的下标，初值为0</span></span><br><span class="line">   <span class="keyword">while</span>(k&lt;e)<span class="comment">//生成的边数小于e时继续循环 </span></span><br><span class="line">   &#123;</span><br><span class="line">       m1=E[j].vex1;</span><br><span class="line">       m2=E[j].vex2;<span class="comment">//取一条边的两个邻接点 </span></span><br><span class="line">       sn1=vset[m1];</span><br><span class="line">       sn2=vset[m2];                           </span><br><span class="line">       <span class="comment">//分别得到两个顶点所属的集合编号 </span></span><br><span class="line">    <span class="keyword">if</span>(sn1!=sn2)<span class="comment">//两顶点分属于不同的集合，该边是最小生成树的一条边  </span></span><br><span class="line">    &#123;<span class="comment">//防止出现闭合回路 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;V%d-V%d=%d\n&quot;</span>,m1,m2,E[j].weight);</span><br><span class="line">sum+=E[j].weight;</span><br><span class="line">k++;   <span class="comment">//生成边数增加 </span></span><br><span class="line"><span class="keyword">if</span>(k&gt;=n)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)    <span class="comment">//两个集合统一编号</span></span><br><span class="line"><span class="keyword">if</span> (vset[i]==sn2)  <span class="comment">//集合编号为sn2的改为sn1</span></span><br><span class="line">vset[i]=sn1;</span><br><span class="line">    &#125;</span><br><span class="line">     j++;<span class="comment">//扫描下一条边 </span></span><br><span class="line">   &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最小权值之和=%d\n&quot;</span>,sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="AOV-网络和拓扑排序"><a href="#AOV-网络和拓扑排序" class="headerlink" title="AOV 网络和拓扑排序"></a>AOV 网络和拓扑排序</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>偏序：若集合 X 上的关系R是传递的、自反的、反对称的，<br>则称R是集合X上的偏序关系。指集合中部分成员之间可比较。</p><p>全序：若关系R 是集合 X 上的偏序关系，如果对于每个x,y属<br>于X，必有xRy 或yRx ，则称R是集合X上的全序关系。指集<br>合中全部成员之间可比较。</p><p>拓扑排序：由一个集合上的一个偏序得到该集合上的一个全<br>序的操作。这个全序被称为拓扑有序。</p><p>AOV(Activity On Vertices)网：有向图表示工程，顶点表示活动，<br>有向边&lt;vi,vj&gt;表示活动vi必须先于活动vj进行,其中vi是vj的直接前驱，<br>vj是vi的直接后继。若从顶点vi到vk有一条路径，则vi是vk的前驱、vk是vi的后继。</p><p>在AOV网中，不应该出现有向环。</p><p>AOV网中检测环的办法：对有向图构造其顶点的拓扑排<br>序序列，若网中所有顶点都在它的拓扑有序序列中，则不<br>存在环。（对一个无向图来说，可以用深度优先遍历，若<br>遇到回边，则必定存在环）</p><h5 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">TopologicalSort</span><span class="params">(ALGraph G)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> Indegree[MAX];</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; S;</span><br><span class="line">    <span class="built_in">FindeIndegree</span>(G,Indegree);<span class="comment">//计算各结点的入度</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,i&lt;G.vexnum;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!Indegree[i])<span class="built_in">push</span>(S,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    p=(ArcNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(ArcNode));</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">empty</span>(S))&#123;</span><br><span class="line">        <span class="built_in">pop</span>(S,k);<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,G.vertices[k].adjvex);count++;</span><br><span class="line">        <span class="keyword">for</span>(p=G.vertices[k].firstarc;p;p=p-&gt;nextarc)&#123;</span><br><span class="line">            <span class="type">int</span> q=p-&gt;adjvex;</span><br><span class="line">            <span class="keyword">if</span>(!(--Indegree[q]))<span class="built_in">push</span>(S,q);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(count&lt;G,vexnum)<span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AOV-网-关键路径"><a href="#AOV-网-关键路径" class="headerlink" title="AOV-网 关键路径"></a>AOV-网 关键路径</h4><pre><code>AOE-网(Active On Edge)：在带权的有向无环图中，顶点表示事件，弧表示工程的一个活动，弧上权值表示活动持续的时间。用来估算工程完成时间。</code></pre><p>源点：入度为0的顶点。汇点：出度为0的顶点。<br>路径长度：AOE网中路径上各活动持续时间之和。<br>关键路径：路径长度最长的路径。</p><p>设活动ai在有向无环图G的有向边&lt;j,k&gt;上：</p><p>事件vj的最早发生时间ve(j):从源点v0到vj的最长路径长度。<br>ve(0)&#x3D;0;<br>ve(j)&#x3D;从源点到顶点j的最长的路径长度。<br>ve(k)&#x3D;Max{ve(j)+dut(&lt;j,k&gt;)}</p><p>事件vj的最迟开始时间vl(j)：保证汇点vn-1在ve(n-1)时刻完成的前提下，事件vj最迟允许开始的时间。<br>vl(n-1) &#x3D; ve(n-1)＝从源点到汇点的最长路径长度;<br>vl(k)&#x3D;从汇点到顶点k的最短的路径长度。<br>vl(j)&#x3D;Min{vl(k)-dut(&lt;j,k&gt;)}</p><p>设活动ai在有向边&lt;j,k&gt;上,有：</p><p>活动ai的最早开始时间e(i)：从源点v0到vj的最长路径长度。<br>e(i)&#x3D; ve(j); </p><p>活动ai的最迟开始时间l(i)：是不推迟工程完成的前提下，该活动允许的最迟开始时间。<br>l(i)&#x3D;vl(k)-dut(&lt;j,k&gt;)</p><p>活动ai时间余量：l(i)-e(i)</p><p>关键活动：满足l(i)&#x3D;e(i)的活动。关键路径上的活动都是关键活动。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">    <span class="type">int</span> ve[MAX];</span><br><span class="line">    <span class="type">int</span> vl[MAX];</span><br><span class="line"><span class="function">Status <span class="title">TopologicalSort</span><span class="params">(ALGraph G,stack T)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> Indegree[MAX];</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; S;</span><br><span class="line">    <span class="built_in">FindeIndegree</span>(G,Indegree);<span class="comment">//计算各结点的入度</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,i&lt;G.vexnum;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!Indegree[i])<span class="built_in">push</span>(S,i);</span><br><span class="line">    ve[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    p=(ArcNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(ArcNode));</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">empty</span>(S))&#123;</span><br><span class="line">        <span class="built_in">pop</span>(S,k);<span class="built_in">push</span>(T,k);<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,G.vertices[k].adjvex);count++;</span><br><span class="line">        <span class="keyword">for</span>(p=G.vertices[k].firstarc;p;p=p-&gt;nextarc)&#123;</span><br><span class="line">            <span class="type">int</span> q=p-&gt;adjvex;</span><br><span class="line">            <span class="keyword">if</span>(!(--Indegree[q]))<span class="built_in">push</span>(S,q);</span><br><span class="line">            <span class="keyword">if</span>(ve[k]+*(p-&gt;info)&gt;ve[q])ve[q]=ve[k]+*(p-&gt;info);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(count&lt;G,vexnum)<span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">CriticalPath</span><span class="params">(ALGraph G)</span></span>&#123;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; T;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">TopologicalSort</span>(Graph G,stack T)) <span class="keyword">return</span> ERROR;<span class="comment">//判断是否有环且求ve</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,i&lt;G.vexnum;i++)&#123;</span><br><span class="line">      vl[i]=ve[G.vexnum<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">empty</span>(T))&#123;<span class="comment">//求vl</span></span><br><span class="line">        <span class="built_in">pop</span>(T,i);</span><br><span class="line">        <span class="keyword">for</span>(p=G.vertices[i].firstarc;p;p=p-&gt;nextarc)&#123;</span><br><span class="line">            <span class="type">int</span> j=p-&gt;adjvex;</span><br><span class="line">            <span class="keyword">if</span>(vl[i]&gt;vl[j]-*(p-&gt;info))vl[i]=ve[j]-*(p-&gt;info);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,i&lt;G.vexnum;i++)&#123;<span class="comment">//对每一个弧判断是否是关键路径/活动</span></span><br><span class="line">        <span class="keyword">for</span>(p=G.vertices[i].firstarc;p;p=p-&gt;nextarc)&#123;</span><br><span class="line">                    <span class="type">int</span> k=p-&gt;adjvex;</span><br><span class="line">                    <span class="type">int</span> e=ve[i];</span><br><span class="line">                    <span class="type">int</span> l=vl[k]-*(p-&gt;info);</span><br><span class="line">                    <span class="keyword">if</span>(e==l)<span class="built_in">printf</span>(<span class="string">&quot;%d;%d;%d&quot;</span>,i,k,*(p-&gt;info));</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h4><h5 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h5><pre><code>用于求源点到其余顶点的最短路径</code></pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShortPath</span><span class="params">(MGraph G,<span class="type">int</span> v0,PathMatrix &amp;P,ShortPathTable &amp;D)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">final</span>[MAX];</span><br><span class="line">    <span class="type">int</span> v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v=<span class="number">0</span>;v&lt;G.vexnum;v++)&#123;</span><br><span class="line">        <span class="keyword">final</span>[v]=<span class="literal">false</span>;</span><br><span class="line">        D[v]=G.arcs[v0][v];<span class="comment">//所有顶点初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> w=<span class="number">0</span>;w&lt;G.vexnum;w++)P[v][w]=<span class="literal">false</span>;<span class="comment">//初始化P数组</span></span><br><span class="line">        <span class="keyword">if</span>(D[v]&lt;INFINITY)P[v][v0]=P[v][v]=<span class="literal">true</span>;<span class="comment">//将与v0有直接路径的顶点更改p</span></span><br><span class="line">    &#125;</span><br><span class="line">    D[v0]=<span class="number">0</span>;fina[v0]=<span class="literal">true</span>;P[v0][v0]=<span class="literal">true</span>;<span class="comment">//处理v0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;G.vexnum;i++)&#123;<span class="comment">//进行n-1次</span></span><br><span class="line">        min=INFINITY;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> w=<span class="number">0</span>;w&lt;G.vexnum;w++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">final</span>[w])</span><br><span class="line">                <span class="keyword">if</span>(D[w]&lt;min)&#123;v=w;min=D[w];&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(min&lt;INFINITY)&#123;</span><br><span class="line">            <span class="keyword">final</span>[v]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> v=<span class="number">0</span>;v&lt;G.vexnum;v++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">final</span>[v]&amp;&amp;(min+G.arcs[w][v])&lt;D[v])&#123;</span><br><span class="line">                D[v]=min+G.arcs[w][v];</span><br><span class="line">                P[v][w]=P[v][w]=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h5><pre><code>用于求点到点的最短路径</code></pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> INFINITY 999</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShortPath</span><span class="params">(MGraph G,PathMatrix &amp;P[],DistanceMatrix &amp;D)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v=<span class="number">0</span>;v&lt;G.vexnum;v++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> w=<span class="number">0</span>;w&lt;G.vexnum;w++)&#123;</span><br><span class="line">            D[v][w]=G.arcs[v][w];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> u=<span class="number">0</span>;u&lt;G.vexnum;u++)P[v][w][u]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(D[v][w]&lt;INFINITY)P[v][w][v]=P[v][w][w]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> u=<span class="number">0</span>;u&lt;G.vexnum;u++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> v=<span class="number">0</span>;v&lt;vexnum;v++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> w=<span class="number">0</span>;w&lt;vexnum;w++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(D[v][w]&gt;D[v][u]+D[u][w])&#123;</span><br><span class="line">                    D[v][w]=D[v][u]+D[u][w];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;G.vexnum;G++)&#123;</span><br><span class="line">                        P[v][w][i]=p[v][u][i]||p[u][w][i];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INFINITY 999</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShortPath</span><span class="params">(MGraph G,PathMatrix &amp;P[],DistanceMatrix &amp;D)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v=<span class="number">0</span>;v&lt;G.vexnum;v++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> w=<span class="number">0</span>;w&lt;G.vexnum;w++)&#123;</span><br><span class="line">            D[v][w]=G.arcs[v][w];<span class="comment">//初始化D</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> u=<span class="number">0</span>;u&lt;G.vexnum;u++)P[v][w][u]=<span class="literal">false</span>;<span class="comment">//初始化P</span></span><br><span class="line">            <span class="keyword">if</span>(D[v][w]&lt;INFINITY)P=[v][w][v]=P[v][w][w]=<span class="literal">true</span>;<span class="comment">//有直接路径v-&gt;w</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> u=<span class="number">0</span>;u&lt;G.vexnum;u++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> v=<span class="number">0</span>;v&lt;G.vexnum;v++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> w=<span class="number">0</span>;w&lt;G.vexnum;w++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(D[v][u]+D[u][w]&lt;D[v][w])&#123;</span><br><span class="line">                    D[v][w]=D[v][u]+D[u][w];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;G.vexnum;i++)&#123;</span><br><span class="line">                    P[v][w][i]=P[v][u][i]||P[u][w][i];<span class="comment">//把从v-&gt;w的最短路径上经过的点全置为true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_VERTEX_NUM 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">ArcNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> adjvex; <span class="comment">//邻接下标,当前表结点</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ArcNode</span>* nextarc;<span class="comment">//下一邻接结点</span></span><br><span class="line">    <span class="type">int</span> info;<span class="comment">//边权值</span></span><br><span class="line">&#125;ArcNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">VNode</span> &#123;</span><br><span class="line">    ArcNode* firstarc;</span><br><span class="line">    <span class="type">int</span> data;<span class="comment">//有关信息</span></span><br><span class="line">&#125;VNode, AdjList[MAX_VERTEX_NUM];</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    AdjList vertices;<span class="comment">//头结点数组</span></span><br><span class="line">    <span class="type">int</span> vexnum, arcnum;</span><br><span class="line">    <span class="type">int</span> kind;</span><br><span class="line">&#125;ALGraph;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> visited[MAX_VERTEX_NUM];</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建邻接表图</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">creatNG</span><span class="params">(ALGraph&amp; G)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    ArcNode* p, *q;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;input顶点，边数:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf_s</span>(<span class="string">&quot;%d,%d&quot;</span>, &amp;G.vexnum, &amp;G.arcnum);<span class="comment">//读入顶点、边数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G.vexnum; i++) &#123;<span class="comment">//读入顶点值</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;输入第%d个顶点值:&quot;</span>,i);</span><br><span class="line">        <span class="built_in">scanf_s</span>(<span class="string">&quot;%d&quot;</span>,&amp;G.vertices[i].data);</span><br><span class="line">        ArcNode* p = (ArcNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(ArcNode));</span><br><span class="line">        G.vertices[i].firstarc = p;</span><br><span class="line">        p-&gt;adjvex = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G.arcnum; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;输入第i条边:&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf_s</span>(<span class="string">&quot;%d,%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        p = (ArcNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(ArcNode));</span><br><span class="line">        q = (ArcNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(ArcNode));</span><br><span class="line">        p-&gt;adjvex = a; q-&gt;adjvex = b;</span><br><span class="line">        p-&gt;nextarc = G.vertices[b].firstarc; G.vertices[b].firstarc = p;<span class="comment">//&lt;b,a&gt;</span></span><br><span class="line">        q-&gt;nextarc = G.vertices[a].firstarc; G.vertices[a].firstarc = q;<span class="comment">//&lt;a,b&gt;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">visit</span><span class="params">(<span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,v);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">FirstAdjVex</span><span class="params">(ALGraph G, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> G.vertices[v].firstarc-&gt;adjvex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">NextAdjVex</span><span class="params">(ALGraph G, <span class="type">int</span> v, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    p = (ArcNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(ArcNode));</span><br><span class="line">    p = G.vertices[v].firstarc;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;adjvex != w) &#123;</span><br><span class="line">        p = p-&gt;nextarc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p-&gt;nextarc-&gt;adjvex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//深度优先</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFStraverse</span><span class="params">(ALGraph G, Status(*Visit)(<span class="type">int</span> v))</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">0</span>; v &lt; G.vexnum; v++)visited[v] = <span class="literal">false</span>;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> u, w;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">0</span>; v &lt; G.vexnum; v++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[v]) &#123;</span><br><span class="line">            <span class="built_in">Visit</span>(v); visited[v] = <span class="literal">true</span>; s.<span class="built_in">push</span>(v);</span><br><span class="line">            <span class="keyword">while</span> (!s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                v=s.<span class="built_in">top</span>();</span><br><span class="line">                s.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">for</span> (w = <span class="built_in">FirstAdjVex</span>(G, v); w!=<span class="number">-1</span>; w = <span class="built_in">NextAdjVex</span>(G, v, w)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!visited[w]) &#123;</span><br><span class="line">                        <span class="built_in">Visit</span>(w); visited[w] = <span class="literal">true</span>; s.<span class="built_in">push</span>(w);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//if (w!=-1) &#123; s.pop(); &#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//广度</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFStraverse</span><span class="params">(ALGraph G, Status(*Visit)(<span class="type">int</span> v))</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">0</span>; v &lt; G.vexnum; v++)visited[v] = <span class="literal">false</span>;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; Q;</span><br><span class="line">    <span class="type">int</span> u, w;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">0</span>; v &lt; G.vexnum; v++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[v]) &#123;</span><br><span class="line">            <span class="built_in">Visit</span>(v); visited[v] = <span class="literal">true</span>; Q.<span class="built_in">push</span>(v);</span><br><span class="line">            <span class="keyword">while</span> (!Q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                u = Q.<span class="built_in">front</span>();</span><br><span class="line">                Q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">for</span> (w = <span class="built_in">FirstAdjVex</span>(G, u);  w != <span class="number">-1</span>; w = <span class="built_in">NextAdjVex</span>(G, u, w)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!visited[w]) &#123;</span><br><span class="line">                        <span class="built_in">Visit</span>(w); visited[w] = <span class="literal">true</span>;  Q.<span class="built_in">push</span>(w);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ALGraph G;</span><br><span class="line">    <span class="built_in">creatNG</span>(G);</span><br><span class="line">    <span class="built_in">DFStraverse</span>(G, visit);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">BFStraverse</span>(G, visit);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><pre><code>查找表(Search Table) ：由同一类型的数据元素(或记录)构成的集合。对查找表经常进行的操作:1）查询某个“特定的”数据元素是否在查找表中；2）检索某个“特定的”数据元素的各种属性；3）在查找表中插入一个数据元素；4）从查找表中删去某个数据元素。静态查找表(Static Search Table) :  仅作上述1）和2）操作的查找表动态查找表(Dynamic Search Table):作上述1）、2）、3）、4）操作的查找表关键字(Key):数据元素中某个数据项的值，用以标识一个数据元素主关键字(Primary Key):可以唯一标识一个记录的关键字次关键字(Secondary Key):用以识别若干记录的关键字平均查找长度查找算法的性能分析：通常以关键字和给定值进行比较的记录个数的平均值为衡量算法好坏的依据.平均查找长度(Average Search Length)：查找算法在查找成功时平均查找长度和查找不成功时平均查找长度之和。查找成功的平均查找长度：为确定记录在查找表中的位置，需和给定值进行比较的关键字个数的期望值， 令：　　　Pi:查找表中第i个记录的概率　　　Ci:找到表中其关键字与给定值相等的第i个记录时，和给定值比较过的关键字的个数．    ASL(SS)=NUM(PiCi);查找不成功平均查找长度：查找不成功时和给定值进行比较的关键字个数的期望值称为查找不成功时平均查找长度。</code></pre><h3 id="顺序表的查找"><a href="#顺序表的查找" class="headerlink" title="顺序表的查找"></a>顺序表的查找</h3><p><strong>代码实现</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>  <span class="title">Search_Seq</span><span class="params">( SSTable  ST,  KeyType key )</span></span></span><br><span class="line"><span class="function"> </span>&#123;   </span><br><span class="line">      ST.elem[<span class="number">0</span>]. key  = key;<span class="comment">//哨兵 </span></span><br><span class="line">      <span class="keyword">for</span> ( i = ST.length ; ! <span class="built_in">EQ</span>(ST.elem[i]. key, key ) ; - - i );      </span><br><span class="line">      <span class="keyword">return</span> i; </span><br><span class="line"> &#125;  <span class="comment">// Search_Seq</span></span><br></pre></td></tr></table></figure><p><strong>性能分析</strong></p><pre><code>等概率下查找成功的平均查找长度：</code></pre><p>$P_{i}&#x3D;\frac{1}{n}$<br>$C_{i}&#x3D;n-i+1$<br>$$ASL_{SS}&#x3D;\frac{1}{n}\sum_{i&#x3D;1}^{n}(n-i+1)&#x3D;\frac{n+1}{2}$$</p><pre><code>等概率下查找不成功的平均查找长度（假定查找成功和查找不成功的可能性相同，对每个记录的查找概率也相同）：</code></pre><p>$P_{i}&#x3D;\frac{1}{2}$<br>$C_{i}&#x3D;n+1$<br>$$ASL_{SF}&#x3D;\frac{1}{2}*(n+1)&#x3D;\frac{n+1}{2}$$<br>    平均查找长度：<br>$$ASL&#x3D;\frac{n+1}{4}+\frac{n+1}{2}&#x3D;\frac{3}{4}(n+1)$$</p><h3 id="有序表的二分查找"><a href="#有序表的二分查找" class="headerlink" title="有序表的二分查找"></a>有序表的二分查找</h3><p><strong>代码实现</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>  <span class="title">Search_Bin</span> <span class="params">( SSTable  ST,  KeyType key )</span></span></span><br><span class="line"><span class="function"> </span>&#123;     </span><br><span class="line">        low = <span class="number">1</span> ; high = ST.length ;</span><br><span class="line">        <span class="keyword">while</span> ( low &lt;= high )       </span><br><span class="line">       &#123;  mid = ( low + high ) / <span class="number">2</span> ; </span><br><span class="line">          <span class="keyword">if</span>  ( <span class="built_in">EQ</span>(ST.elem[mid]. key, key ) ) <span class="keyword">return</span> mid ;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">LT</span>( key , ST.elem[mid]. key ) )  high = mid <span class="number">-1</span> ;</span><br><span class="line">          <span class="keyword">else</span> low = mid + <span class="number">1</span>; </span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span> ；</span><br><span class="line"> &#125;  <span class="comment">// Search_Bin</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>性能分析</strong><br>    一般情况下，表长为n的折半查找的判定树的深度和含有n个<br>    结点的完全二叉树的深度相同，设$n&#x3D;2^{h}-1$且查找概率相等<br>    （1&#x2F;n），则折半查找成功的平均查找长度<br>$$ASL_{SS}&#x3D;\frac{1}{n}\sum_{j&#x3D;1}^{h}j*2^{j-1}&#x3D;\frac{n+1}{n}\log_{2}{(n+1)}-1$$</p><h3 id="分块有序的查找（索引顺序表的查找）"><a href="#分块有序的查找（索引顺序表的查找）" class="headerlink" title="分块有序的查找（索引顺序表的查找）"></a>分块有序的查找（索引顺序表的查找）</h3><p><strong>定义</strong><br>    顺序表+索引表组成<br>    索引表按关键字有序，可用二分或顺序查找<br><strong>性能分析</strong><br>    长度为n的表平均分成n块，每块含有s个记录<br>    $ASL_{bs}&#x3D;L_{b}+L_{s}$<br>    $L_{b}$:索引表确定所在块的平均查找长度<br>    $L_{s}$:块中查找元素的平均查找长度<br>    $ASL_{bs}&#x3D;L_{b}+L_{s}&#x3D;b\sum_{j&#x3D;1}^{b}j+s\sum_{j&#x3D;1}^{s}j&#x3D;\frac{b+1}{2}+\frac{s+1}{2}$</p><h3 id="二叉查找树（二叉排序树）"><a href="#二叉查找树（二叉排序树）" class="headerlink" title="二叉查找树（二叉排序树）"></a>二叉查找树（二叉排序树）</h3><p><strong>定义</strong><br>二叉排序树(二叉查找树）(Binary Sort Tree, BST)：空树或具<br>有下列性质的二叉树:<br>根的左子树若非空，则左子树上的所有结点的关键字值均小于根结点的值。<br>根的右子树若非空，则右子树上的所有结点的关键字值均大于根结点的值。<br>它的左右子树同样是二叉排序树。</p><p>中序遍历二叉排序树可得到一个关键字的有序序列<br><strong>算法实现</strong><br><em>1.查找</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">Search</span><span class="params">(BiTree T,KeyType key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>||<span class="built_in">EQ</span>(key,T-&gt;data.key))<span class="keyword">return</span> T;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">LT</span>(key,T-&gt;data.key)) <span class="keyword">return</span> <span class="built_in">Search</span>(T-&gt;left,key);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">Search</span>(T-&gt;right,key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>2.插入</em><br>&#x3D;&#x3D;改进查找算法&#x3D;&#x3D;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">Search</span><span class="params">(BiTree T,KeyType key,BiTree f,BiTree &amp;p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!T)&#123;p=f; <span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">EQ</span>(kEY,T-&gt;data.key))&#123;p=T;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">LT</span>(key,T-&gt;data.key))<span class="keyword">return</span> <span class="built_in">Search</span>(T-&gt;left,key,T,p);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">Search</span>(T-&gt;right,key,T,p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">Insert</span><span class="params">(BiTree &amp;T,Element e)</span></span>&#123;</span><br><span class="line">    Bitree p;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">Search</span>(Bitree T,e.key,<span class="literal">NULL</span>,p))&#123;<span class="comment">//查询失败</span></span><br><span class="line">        Bitree s=(BiTree)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(BiTNode));</span><br><span class="line">        s-&gt;data=e;s-&gt;left=s-&gt;right=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span>(!p)T=s;<span class="comment">//插入结点是根结点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">LT</span>(e.key,p-&gt;data.key)) p-&gt;left=s;</span><br><span class="line">        <span class="keyword">else</span> p-&gt;right=s;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    reutrn <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>3.删除</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">DeleteBST</span><span class="params">(BSTree &amp;T,<span class="type">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!T)<span class="keyword">return</span> FALSE;<span class="comment">//空树</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">EQ</span>(key,T-&gt;data)) <span class="keyword">return</span> <span class="built_in">Delete</span>(T);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">LT</span>(key,T-&gt;data))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">DeleteBST</span>(T-&gt;lchild,key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">DeleteBST</span>(T-&gt;rchild,key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Delete</span><span class="params">(BSTree &amp;p)</span></span>&#123;</span><br><span class="line">    BSTree q=(BSTree)<span class="built_in">malloc</span>(<span class="built_in">szieof</span>(BiTNode))</span><br><span class="line">    <span class="keyword">if</span>(!p-&gt;rchild)&#123;</span><br><span class="line">        q=p;p=p-&gt;lchild;<span class="built_in">free</span>(q);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!p-&gt;lchild)&#123;</span><br><span class="line">        q=p;p=p-&gt;rchild;<span class="built_in">free</span>(q);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        q=p;</span><br><span class="line">        s=p-&gt;lchild;</span><br><span class="line">        <span class="keyword">while</span>(s-&gt;rchild)&#123;<span class="comment">//找左子树最大值</span></span><br><span class="line">            q=s;</span><br><span class="line">            s=s-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;data=s-&gt;data;<span class="comment">//取左子树最大值</span></span><br><span class="line">        <span class="keyword">if</span>(q!=p)q-&gt;rchild=s-&gt;lchild;<span class="comment">//悬挂最大值的左子树</span></span><br><span class="line">        <span class="keyword">else</span> q-&gt;lchild=s-&gt;lchild;</span><br><span class="line">        <span class="built_in">free</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>性能分析</strong><br>    最坏情况：单支树，深度为n,$ASL_(ss)&#x3D;\frac{n+1}{2}$<br>    最好情况：折半查找判定树，深度为n,$ASL_(ss)$与$log_(2)^(n)$成正比</p><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><h4 id="直接插入排序（基于顺序查找）"><a href="#直接插入排序（基于顺序查找）" class="headerlink" title="直接插入排序（基于顺序查找）"></a>直接插入排序（基于顺序查找）</h4><p><strong>介绍</strong><br>    稳定排序<br>    从未排序中依次取出元素与已排序的元素依次比较并插入到合适位置<br>    缺点：大量数据时，比较和移动操作过多<br>    优点：容易实现，适用于基本有序<br><strong>时间复杂度</strong><br>    $$O(n^{2})$$<br>    最好情况：比较n-1，移动0<br>    最坏情况：比较$\sum_{i&#x3D;2}^{n}i&#x3D;\frac{(n+2)(n-1)}{2}$,移动$\sum_{i&#x3D;2}^{n}(i+1)&#x3D;\frac{(n+4)(n-1)}{2}$<br><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InsertionSort</span><span class="params">(SqLiist &amp;L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=L.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">LT</span>(L.r[i].key,L.r[i<span class="number">-1</span>].key))&#123;</span><br><span class="line">            L.r[<span class="number">0</span>]=L.r[i];<span class="comment">//监视哨</span></span><br><span class="line">            L.r[i]=L.r[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">-2</span>;<span class="built_in">LT</span>(L.r[<span class="number">0</span>].key,L.r[j].key);--j)</span><br><span class="line">                L.r[j+<span class="number">1</span>]=L.r[j];<span class="comment">//比监事哨大的一律右移动</span></span><br><span class="line">            L.r[j+<span class="number">1</span>]=L.r[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InsertionSort</span><span class="params">(SqLit &amp; L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=L.length;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">LT</span>(L.r[i].key,L.r[i<span class="number">-1</span>].key))&#123;</span><br><span class="line">            L.r[<span class="number">0</span>]=L.r[i]; <span class="comment">//复制为监视哨</span></span><br><span class="line">            L.r[i]=L.r[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">-2</span>;<span class="built_in">LT</span>(L.r[<span class="number">0</span>].key,L.r[j].key);--j)</span><br><span class="line">                L.r[j+<span class="number">1</span>]=L.r[j];</span><br><span class="line">            L.r[j+<span class="number">1</span>]=L.r[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="折半插入排序（基于折半查找）"><a href="#折半插入排序（基于折半查找）" class="headerlink" title="折半插入排序（基于折半查找）"></a>折半插入排序（基于折半查找）</h4><p><strong>介绍</strong><br>    稳定<br>    把直接插入排序比较代码替换为折半查找插入位置<br><strong>时间复杂度</strong><br>    $$O(n^{2})<br>    仅仅优化了比较次数<br><strong>代码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">void BiInsertionSort(SqList &amp;L)&#123;</span><br><span class="line">    for(int i=2;i&lt;L.length;i++)&#123;</span><br><span class="line">        L.r[0]=L.r[i];</span><br><span class="line">        low=1;high=i-1;</span><br><span class="line">        while(low&lt;=high)&#123;</span><br><span class="line">            m=(low+high)/2;</span><br><span class="line">            if(LT(L.r[0].key,L.r[m],key))&#123;</span><br><span class="line">                high=m-1;</span><br><span class="line">            &#125;else low=m+1;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int j=i-1;j&gt;=high+1;j--)</span><br><span class="line">            L.r[j+1]=L.r[j];//后移数据</span><br><span class="line">        L.r[high+1]=L.r[0];//插入</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="希尔排序（基于逐趟缩小增量）"><a href="#希尔排序（基于逐趟缩小增量）" class="headerlink" title="希尔排序（基于逐趟缩小增量）"></a>希尔排序（基于逐趟缩小增量）</h4><p><strong>介绍</strong><br>    不稳定<br>    使用增量进行直接插入排序<br><strong>时间复杂度</strong><br>    在$O(nlog_{2}^{n})$与$O(n^{2})$之间<br><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShellSort</span> <span class="params">(SqList &amp;L, <span class="type">int</span> dlta[], <span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;    <span class="comment">// 增量为dlta[]的希尔排序</span></span><br><span class="line">     <span class="keyword">for</span> (k=<span class="number">0</span>; k&lt;t; ++t)</span><br><span class="line">         <span class="built_in">ShellInsert</span>(L, dlta[k]);</span><br><span class="line">             <span class="comment">//一趟增量为dlta[k]的插入排序</span></span><br><span class="line">&#125; <span class="comment">// ShellSort</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShellInsert</span> <span class="params">( SqList &amp;L, <span class="type">int</span> dk )</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">for</span> ( i=dk+<span class="number">1</span>; i&lt;=L.length; ++i )</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">LT</span>( L.r[i].key,L.r[i-dk].key)) &#123;</span><br><span class="line">        L.r[<span class="number">0</span>] = L.r[i];            <span class="comment">// 暂存在r[0]</span></span><br><span class="line">        <span class="keyword">for</span> (j=i-dk;  j&gt;<span class="number">0</span>&amp;&amp; <span class="built_in">LT</span>(L.r[<span class="number">0</span>].key,L.r[j].key); j-=dk)</span><br><span class="line">           L.r[j+dk] = L.r[j];  <span class="comment">// 记录后移，查找插入位置</span></span><br><span class="line">        L.r[j+dk] = L.r[<span class="number">0</span>];                <span class="comment">// 插入</span></span><br><span class="line">      &#125; <span class="comment">// if</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// ShellInsert</span></span><br></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p><strong>介绍</strong><br>    稳定<br>    对n个数进行n-1趟排序，每次冒泡最大值<br><strong>时间复杂度</strong><br>    $O(n^{2})$<br>    最坏比较$\sum_{i&#x3D;n}^{2}(i-1)&#x3D;\frac{n(n-1)}{2}$<br>    最坏移动$3\sum_{i&#x3D;n}^{2}(i-1)&#x3D;\frac{3n(n-1)}{2}$<br><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>; </span><br><span class="line">    <span class="type">int</span> change = <span class="number">1</span>;<span class="comment">//交换标志</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>,change=<span class="number">1</span>; i &lt; size - <span class="number">1</span>&amp;&amp;change; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        change = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; size - i - <span class="number">1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                change = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;第%d趟交换结果：&quot;</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; size; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[k]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p><strong>介绍</strong><br>    稳定<br>    首先选一个枢值（即比较的基准），通过一趟排序将待排序记录分割成独立的两部分前一部分记录的关键码均小于或等于枢值，后一部分记录的关键码均大于或等于枢值，然后分别对这两部分重复上述方法，直到整个序列有序。<br><strong>时间复杂度</strong><br>    平均时间复杂度&#x3D;最好时间复杂度&#x3D;$O(nlog_{2}^{n})$<br>    最坏时间复杂度$O(n^{2})$（当序列有序时，退化为冒泡排序）<br><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Partition</span> <span class="params">(SqList&amp; L, <span class="type">int</span> low, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">L.r[<span class="number">0</span>]=L.r[low];  </span><br><span class="line">pivotkey = L.r[low].key;</span><br><span class="line">  <span class="keyword">while</span> (low&lt;high) &#123;</span><br><span class="line">    <span class="keyword">while</span> (low&lt;high &amp;&amp; L.r[high].key&gt;=pivotkey)    </span><br><span class="line">       --high;</span><br><span class="line">    L.r[low]=L.r[high];   </span><br><span class="line">    <span class="keyword">while</span> (low&lt;high &amp;&amp; L.r[low].key&lt;=pivotkey) </span><br><span class="line">       ++low;</span><br><span class="line">    L.r[high]=L.r[low];</span><br><span class="line">  &#125;</span><br><span class="line">L.r[low]=L.r[<span class="number">0</span>];  </span><br><span class="line"><span class="keyword">return</span> low;          <span class="comment">// 返回枢轴所在位置</span></span><br><span class="line">&#125; <span class="comment">// Partition</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QSort</span> <span class="params">(SqList &amp;L,  <span class="type">int</span> low,  <span class="type">int</span>  high)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 对记录序列R[s..t]进行快速排序 </span></span><br><span class="line">  <span class="keyword">if</span> (low &lt; high) &#123;             <span class="comment">// 长度大于1</span></span><br><span class="line">    pivotloc = <span class="built_in">Partition</span>(L, low, high);</span><br><span class="line">                        <span class="comment">// 对 R[s..t] 进行一次划分</span></span><br><span class="line">    <span class="built_in">QSort</span>(L, low, pivotloc<span class="number">-1</span>);</span><br><span class="line">      <span class="comment">// 对低子序列递归排序，pivotloc是枢轴位置</span></span><br><span class="line">    <span class="built_in">QSort</span>(L, pivotloc+<span class="number">1</span>, high); <span class="comment">// 对高子序列递归排序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// QSort</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QuickSort</span><span class="params">( SqList &amp; L)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 对顺序表进行快速排序</span></span><br><span class="line">     <span class="built_in">QSort</span>(L, <span class="number">1</span>, L.length);</span><br><span class="line">&#125; <span class="comment">// QuickSort</span></span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h3><p><strong>介绍</strong><br>    从无序序列中选出最小记录插入到有序序列<br><strong>时间复杂度</strong><br>    $O(n^{2})$<br>    比较总次数$\sum_{i&#x3D;1}^{n-1}(n-i)&#x3D;\frac{n(n-1)}{2}$<br><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">SelectSort</span> <span class="params">(SqList &amp;L)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 对记录序列R[1..n]作简单选择排序。</span></span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;L.length; ++i) &#123;</span><br><span class="line">               <span class="comment">// 选择第 i 小的记录，并交换到位</span></span><br><span class="line">    j = <span class="built_in">SelectMinKey</span>(L, i);       </span><br><span class="line">         <span class="comment">// 在 R[i..n] 中选择关键字最小的记录</span></span><br><span class="line">    <span class="keyword">if</span> (i!=j)  L.r[i]←→L.r[j];</span><br><span class="line">                   <span class="comment">// 与第 i 个记录交换</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="comment">// SelectSort</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p><strong>介绍</strong><br>    不稳定<br>    大根堆&#x2F;小根堆：完全二叉树中所有非终端结点的值均不小于(或不大于)其左、右孩子结点的值。<br>    若在输出堆顶的最小(大)值之后，使得剩余n-1个元素的序列重又建成一个堆，则得到 n个元素中的次小(大)值。此反复执行，便能得到一个有序序列，这个过程称之为堆排序。<br><strong>复杂度</strong><br>    时间复杂度$O(nlog_{2}^{n})$<br>    空间复杂度$O(1)$</p><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><h2 id="复杂度总结"><a href="#复杂度总结" class="headerlink" title="复杂度总结"></a>复杂度总结</h2><p>&#x3D;&#x3D;选择排序不稳定&#x3D;&#x3D;<br><img src="https://img2023.cnblogs.com/blog/3019910/202212/3019910-20221220075736804-2131383074.png" alt="img"><br><img src="https://images.cnblogs.com/cnblogs_com/blogs/776237/galleries/2245482/o_230227024710_20210316213527859.png" alt="img"></p><h1 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h1><h2 id="埃及分数"><a href="#埃及分数" class="headerlink" title="埃及分数"></a>埃及分数</h2><p>旅行规划<br>对以自身为中心的景点按距离排序<br>出行时间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a,b,c,d,e;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;分子，分母&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d,%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d/%d=&quot;</span>,a,b);</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">c=b/a;</span><br><span class="line">e=c+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1/%d+&quot;</span>,e);</span><br><span class="line">a=a*e-b; </span><br><span class="line">b=b*e;</span><br><span class="line">    &#125;<span class="keyword">while</span>(a!=<span class="number">1</span>&amp;&amp;b%a!=<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(a!=<span class="number">1</span>&amp;&amp;b%a==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1/%d&quot;</span>,b/a);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1/%d&quot;</span>,b/a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="五个莫尼森数"><a href="#五个莫尼森数" class="headerlink" title="五个莫尼森数"></a>五个莫尼森数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> m,p=<span class="number">2</span>,a=<span class="number">1</span>,t,i,b,x;</span><br><span class="line"><span class="keyword">while</span>(a&lt;=<span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">m=<span class="built_in">pow</span>(<span class="number">2.0</span>,p)<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(t=<span class="number">2</span>;t&lt;m;t++)</span><br><span class="line">   <span class="keyword">if</span>(m%t==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">if</span>(m==t)</span><br><span class="line">   &#123;</span><br><span class="line">   a++;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,m);</span><br><span class="line">         &#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123; p++;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">2</span>;x&lt;p;x++)</span><br><span class="line"><span class="keyword">if</span>(p%x==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(p!=x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*t = 0;</span></span><br><span class="line"><span class="comment">while ( t == 0 )</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">p++;</span></span><br><span class="line"><span class="comment">for ( t = 1, j = 2; t &amp;&amp; j &lt;= sqrt( p ); j++ )</span></span><br><span class="line"><span class="comment">if ( p % j == 0 )</span></span><br><span class="line"><span class="comment">t = 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="输出星号"><a href="#输出星号" class="headerlink" title="输出星号"></a>输出星号</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line"> &#123;<span class="type">int</span> i,j,k;</span><br><span class="line"> <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">   &#123;<span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;=<span class="number">2</span>-i;j++)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (k=<span class="number">0</span>;k&lt;=<span class="number">2</span>*i;k++)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;=<span class="number">2</span>;i++)</span><br><span class="line">   &#123;<span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;=i;j++)</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (k=<span class="number">0</span>;k&lt;=<span class="number">4</span><span class="number">-2</span>*i;k++)</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="分解质因数"><a href="#分解质因数" class="headerlink" title="分解质因数"></a>分解质因数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n, i;</span><br><span class="line"><span class="built_in">scanf</span>( <span class="string">&quot;%d&quot;</span>, &amp;n );</span><br><span class="line"><span class="built_in">printf</span>( <span class="string">&quot;%d=&quot;</span>, n );</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">2</span>; i &lt;= n; i++ )</span><br><span class="line"><span class="keyword">while</span> ( n != i )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ( n % i == <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>( <span class="string">&quot;%d*&quot;</span>, i );</span><br><span class="line">n = n / i;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>( <span class="string">&quot;%d&quot;</span>, n );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="完数"><a href="#完数" class="headerlink" title="完数"></a>完数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=<span class="number">1000</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;i;j++)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%j==<span class="number">0</span>)</span><br><span class="line">                sum+=j;</span><br><span class="line">                    &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum==i)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d=1&quot;</span>,sum);</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">2</span>;j&lt;i;j++)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%j==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;+%d&quot;</span>,j);</span><br><span class="line">              </span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum==i)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        sum=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="质数"><a href="#质数" class="headerlink" title="质数"></a>质数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> i,j,n=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">100</span>;i&lt;=<span class="number">200</span>;i++)</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">for</span>(j=<span class="number">2</span>;j&lt;i;j++)</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">if</span>(i%j==<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">break</span>; </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="keyword">if</span>(j==i)</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line">     n++;</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">10</span>==<span class="number">0</span>)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="公约数，公倍数"><a href="#公约数，公倍数" class="headerlink" title="公约数，公倍数"></a>公约数，公倍数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> m,n,r,x,t;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入两个正整数：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d,%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">if</span>(n&lt;m)</span><br><span class="line">    &#123;x=n;</span><br><span class="line">    n=m;</span><br><span class="line">    m=x;</span><br><span class="line">    </span><br><span class="line">    &#125;t=n*m;</span><br><span class="line"> <span class="keyword">while</span>(m!=<span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">    r=n%m;</span><br><span class="line">    n=m;</span><br><span class="line">    m=r;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;最大公约数为:%d\n&quot;</span>,n);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;最小公倍数为:%d\n&quot;</span>,t/n);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> m,n,i,x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d,%d&quot;</span>,&amp;m,&amp;n);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">for(i=m;i&gt;0;i--)</span></span><br><span class="line"><span class="comment">  if(m%i==0&amp;&amp;n%i==0)</span></span><br><span class="line"><span class="comment">  &#123;printf(&quot;max公约数:%d\nmin公倍数:%d&quot;,i,m*n/i);</span></span><br><span class="line"><span class="comment">  break;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">*/</span>   x=m*n;</span><br><span class="line">     <span class="keyword">while</span>(i!=<span class="number">0</span>)</span><br><span class="line">     &#123;i=m%n;</span><br><span class="line">     m=n;</span><br><span class="line">     n=i;</span><br><span class="line">     &#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;max公约数:%d\nmin公倍数:%d&quot;</span>,m,x/m);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="分解质因子式"><a href="#分解质因子式" class="headerlink" title="分解质因子式"></a>分解质因子式</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="type">long</span> <span class="type">int</span> m, n;</span><br><span class="line"><span class="type">int</span> count;</span><br><span class="line"><span class="type">int</span> isPrime,flag;</span><br><span class="line">isPrime = <span class="number">1</span>;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%ld&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%ld=&quot;</span>,n);</span><br><span class="line">m = <span class="built_in">sqrt</span>(n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">2</span>; i &lt;= m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(n%i == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;,i);</span></span><br><span class="line">isPrime = <span class="number">0</span>;</span><br><span class="line">count = <span class="number">1</span>;</span><br><span class="line">n = n / i;</span><br><span class="line"><span class="keyword">while</span>(n%i == <span class="number">0</span>)&#123;</span><br><span class="line">n = n / i;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(count == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d^%d&quot;</span>,i,count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isPrime)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="统计单词个数"><a href="#统计单词个数" class="headerlink" title="统计单词个数"></a>统计单词个数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> <span class="built_in">string</span>[<span class="number">81</span>];</span><br><span class="line">    <span class="type">int</span> i,sum=<span class="number">0</span>,word=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    gets(<span class="built_in">string</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;(c=<span class="built_in">string</span>[i]!=<span class="string">&#x27;\0&#x27;</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;&#x27;)word=0;</span></span><br><span class="line"><span class="string">        else if(word==0)&#123;</span></span><br><span class="line"><span class="string">            word=1;</span></span><br><span class="line"><span class="string">            num++;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    printf(&quot;There are %d words in this line.\n&quot;,sum);</span></span><br><span class="line"><span class="string">    retun 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="数字变字符"><a href="#数字变字符" class="headerlink" title="数字变字符"></a>数字变字符</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VedioExtractSpeech</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;toChinese：&quot;</span>+toChinese(<span class="string">&quot;1230456&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;toChinese2：&quot;</span>+toChinese2(<span class="string">&quot;1230456&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">toChinese</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        String[] s1 = &#123; <span class="string">&quot;零&quot;</span>, <span class="string">&quot;一&quot;</span>, <span class="string">&quot;二&quot;</span>, <span class="string">&quot;三&quot;</span>, <span class="string">&quot;四&quot;</span>, <span class="string">&quot;五&quot;</span>, <span class="string">&quot;六&quot;</span>, <span class="string">&quot;七&quot;</span>, <span class="string">&quot;八&quot;</span>, <span class="string">&quot;九&quot;</span> &#125;;</span><br><span class="line">        String[] s2 = &#123; <span class="string">&quot;十&quot;</span>, <span class="string">&quot;百&quot;</span>, <span class="string">&quot;千&quot;</span>, <span class="string">&quot;万&quot;</span>, <span class="string">&quot;十&quot;</span>, <span class="string">&quot;百&quot;</span>, <span class="string">&quot;千&quot;</span>, <span class="string">&quot;亿&quot;</span>, <span class="string">&quot;十&quot;</span>, <span class="string">&quot;百&quot;</span>, <span class="string">&quot;千&quot;</span> &#125;;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> str.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> str.charAt(i) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (i != n - <span class="number">1</span> &amp;&amp; num != <span class="number">0</span>) &#123;</span><br><span class="line">                result += s1[num] + s2[n - <span class="number">2</span> - i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result += s1[num];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">toChinese2</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        String[] s2 = &#123;<span class="string">&quot;零&quot;</span>, <span class="string">&quot;一&quot;</span>, <span class="string">&quot;二&quot;</span>, <span class="string">&quot;三&quot;</span>, <span class="string">&quot;四&quot;</span>, <span class="string">&quot;五&quot;</span>, <span class="string">&quot;六&quot;</span>, <span class="string">&quot;七&quot;</span>, <span class="string">&quot;八&quot;</span>, <span class="string">&quot;九&quot;</span>&#125;;</span><br><span class="line">        StringBuffer sb=<span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : str.toCharArray()) &#123;</span><br><span class="line">            sb.append(s2[Integer.parseInt(String.valueOf(c))]);</span><br><span class="line">        &#125;</span><br><span class="line">           <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="取每一位数字"><a href="#取每一位数字" class="headerlink" title="取每一位数字"></a>取每一位数字</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">456789</span></span><br><span class="line"><span class="number">5</span>：a<span class="comment">//10000%10</span></span><br></pre></td></tr></table></figure><h1 id="二分法循环"><a href="#二分法循环" class="headerlink" title="二分法循环"></a>二分法循环</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target)</span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="type">int</span> low=<span class="number">0</span> , high=numsSize<span class="number">-1</span>;</span><br><span class="line">   <span class="type">int</span> half=(low+high)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (low&lt;=high)&#123;  </span><br><span class="line">     half = (low + high) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (nums[half]==target)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> (nums[half]&gt;target)&#123;</span><br><span class="line">        high=half<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span> (nums[half]&lt;target)&#123;</span><br><span class="line">    low=half+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(nums[half]==target)&#123;</span><br><span class="line">           <span class="keyword">return</span> half;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javasuanfa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        System.out.println(search(nums, target));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; nums[<span class="number">0</span>] || target &gt; nums[nums.length - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">             <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; nums[mid]) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &gt; nums[mid]) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javasuanfa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        System.out.println(search(nums, target,<span class="number">0</span>,nums.length-<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; nums[<span class="number">0</span>] || target &gt; nums[nums.length - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        left = <span class="number">0</span>;</span><br><span class="line">        right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; nums[mid]) &#123;</span><br><span class="line">            <span class="keyword">return</span> search(nums, target, left, mid - <span class="number">1</span>);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (target &gt; nums[mid]) &#123;</span><br><span class="line">            <span class="keyword">return</span> search(nums, target, mid + <span class="number">1</span>, right);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><h2 id="打擂台"><a href="#打擂台" class="headerlink" title="打擂台"></a>打擂台</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;,&#123;<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>&#125;&#125;,t,x,y,max,row,colum;</span><br><span class="line">    max=a[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(x=<span class="number">0</span>;x&lt;=<span class="number">2</span>;x++)</span><br><span class="line">       &#123;<span class="keyword">for</span>(y=<span class="number">0</span>;y&lt;=<span class="number">3</span>;y++)</span><br><span class="line">       <span class="keyword">if</span>(a[x][y]&gt;max)</span><br><span class="line">       &#123;</span><br><span class="line">       max=a[x][y];</span><br><span class="line">       row=x;</span><br><span class="line">       colum=y;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span> </span><br><span class="line">   &#123;</span><br><span class="line">       row=<span class="number">0</span>;</span><br><span class="line">       colum=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max=%d\nrow=%d\ncolum=%d\n&quot;</span>,max,row+<span class="number">1</span>,colum+<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="冒泡排序-1"><a href="#冒泡排序-1" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="c语言"><a href="#c语言" class="headerlink" title="c语言"></a>c语言</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bubble_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>; </span><br><span class="line">    <span class="type">int</span> change = <span class="number">1</span>;<span class="comment">//交换标志</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>,change=<span class="number">1</span>; i &lt; size - <span class="number">1</span>&amp;&amp;change; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        change = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; size - i - <span class="number">1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                change = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;第%d趟交换结果：&quot;</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; size; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[k]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入数组大小size:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp; size);</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">100</span>];</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入要升序排序的数组:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序前：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    bubble_sort(arr, size); <span class="comment">// 冒泡排序函数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序后：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>],t,i,n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;input10nums:&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;=<span class="number">8</span>;n++)<span class="comment">//8=N-2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">8</span>-n;i++)<span class="comment">//8-n=N-2-n </span></span><br><span class="line">  &#123;<span class="keyword">if</span>(a[i]&gt;a[i+<span class="number">1</span>]) </span><br><span class="line">     &#123;t=a[i];</span><br><span class="line">      a[i]=a[i+<span class="number">1</span>];</span><br><span class="line">      a[i+<span class="number">1</span>]=t;</span><br><span class="line">      </span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image002.jpg" alt="文本  描述已自动生成"></p><p><img src="file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image004.jpg" alt="文本  描述已自动生成"></p><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String []args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> arry[]=&#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        Main sorter=<span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">        sorter.sort(arry);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] array)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;array.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;k&lt;array.length-<span class="number">1</span>-i;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(array[k]&gt;array[k+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="type">int</span> temp=array[k];</span><br><span class="line">                    array[k]=array[k+<span class="number">1</span>];</span><br><span class="line">                    array[k+<span class="number">1</span>]=temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">        showArray(array);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showArray</span><span class="params">(<span class="type">int</span>[] aray)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x:aray)&#123;</span><br><span class="line">            System.out.print(x );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="链表冒泡排序"><a href="#链表冒泡排序" class="headerlink" title="链表冒泡排序"></a>链表冒泡排序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LEN sizeof(struct student)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span>  <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span><span class="type">long</span> num;</span><br><span class="line"> <span class="type">int</span> score;</span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">lista</span>,<span class="title">listb</span>;</span></span><br><span class="line"><span class="type">int</span> n,sum=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;<span class="keyword">struct</span> student *<span class="title function_">creat</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"> <span class="keyword">struct</span> student *<span class="title function_">insert</span><span class="params">(<span class="keyword">struct</span> student  *,<span class="keyword">struct</span> student *)</span>;</span><br><span class="line"> <span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="keyword">struct</span> student *)</span>;</span><br><span class="line"> <span class="keyword">struct</span> student *<span class="title function_">px</span><span class="params">(<span class="keyword">struct</span> student *abh,<span class="type">int</span> sum)</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">ahead</span>,*<span class="title">bhead</span>,*<span class="title">abh</span>;</span></span><br><span class="line"> </span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;input list a:\n&quot;</span>);</span><br><span class="line"> ahead=creat();</span><br><span class="line"> sum=sum+n;</span><br><span class="line"> </span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;input list b:\n&quot;</span>);</span><br><span class="line"> bhead=creat();</span><br><span class="line"> sum=sum+n;</span><br><span class="line"> </span><br><span class="line"> abh=insert(ahead,bhead);</span><br><span class="line"> </span><br><span class="line"> abh=px(abh,sum);</span><br><span class="line"> </span><br><span class="line"> print(abh);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> student *<span class="title function_">creat</span><span class="params">(<span class="type">void</span>)</span>       <span class="comment">//建立链表函数</span></span><br><span class="line"> &#123;<span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p1</span>,*<span class="title">p2</span>,*<span class="title">head</span>;</span></span><br><span class="line">  n=<span class="number">0</span>;</span><br><span class="line">  p1=p2=(<span class="keyword">struct</span> student *)<span class="built_in">malloc</span>(LEN);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;input number &amp; scores of student:\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;if number is 0,stop inputing.\n&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%ld,%d&quot;</span>,&amp;p1-&gt;num,&amp;p1-&gt;score);</span><br><span class="line">  head=<span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">while</span>(p1-&gt;num !=<span class="number">0</span>)</span><br><span class="line">    &#123;n=n+<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">if</span> (n==<span class="number">1</span>)</span><br><span class="line">       head=p1;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">       p2-&gt;next=p1;</span><br><span class="line">     p2=p1;</span><br><span class="line">     p1=(<span class="keyword">struct</span> student *)<span class="built_in">malloc</span>(LEN);</span><br><span class="line">     <span class="built_in">scanf</span>(<span class="string">&quot;%ld,%d&quot;</span>,&amp;p1-&gt;num,&amp;p1-&gt;score);</span><br><span class="line">    &#125;</span><br><span class="line">    p2-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span>(head);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">struct student *insert(struct student *ah,struct student *bh)   //插入函数</span></span><br><span class="line"><span class="comment"> &#123;struct student * pa1,* pa2,* pb1,* pb2;</span></span><br><span class="line"><span class="comment">  pa2=pa1=ah;</span></span><br><span class="line"><span class="comment">  pb2=pb1=bh;</span></span><br><span class="line"><span class="comment">  do</span></span><br><span class="line"><span class="comment">  &#123;while((pb1-&gt;num&gt;pa1-&gt;num) &amp;&amp; (pa1-&gt;next !=NULL))</span></span><br><span class="line"><span class="comment">     &#123;pa2=pa1;</span></span><br><span class="line"><span class="comment">      pa1=pa1-&gt;next;</span></span><br><span class="line"><span class="comment">     &#125;</span></span><br><span class="line"><span class="comment">    if (pb1-&gt;num &lt;= pa1-&gt;num) </span></span><br><span class="line"><span class="comment">     &#123;if (ah==pa1)</span></span><br><span class="line"><span class="comment">    ah=pb1;</span></span><br><span class="line"><span class="comment">      else </span></span><br><span class="line"><span class="comment">pa2-&gt;next=pb1;</span></span><br><span class="line"><span class="comment">  pb1=pb1-&gt;next;</span></span><br><span class="line"><span class="comment">  pb2-&gt;next=pa1;</span></span><br><span class="line"><span class="comment">      pa2=pb2;</span></span><br><span class="line"><span class="comment">  pb2=pb1;</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment">&#125;while ((pa1-&gt;next!=NULL) || (pa1==NULL &amp;&amp; pb1!=NULL));</span></span><br><span class="line"><span class="comment">    if ((pb1!=NULL) &amp;&amp; (pb1-&gt;num&gt;pa1-&gt;num) &amp;&amp; (pa1-&gt;next==NULL))</span></span><br><span class="line"><span class="comment">      pa1-&gt;next=pb1;</span></span><br><span class="line"><span class="comment">    return(ah);</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> student *<span class="title function_">insert</span><span class="params">(<span class="keyword">struct</span> student *ah,<span class="keyword">struct</span> student *bh)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">pnew</span>;</span></span><br><span class="line">pnew=ah;</span><br><span class="line"><span class="keyword">while</span>(pnew-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">pnew=pnew-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">pnew-&gt;next=bh;</span><br><span class="line"><span class="keyword">return</span>(ah);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> student *<span class="title function_">px</span><span class="params">(<span class="keyword">struct</span> student *abh,<span class="type">int</span> sum)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p</span>,*<span class="title">p1</span>,*<span class="title">p2</span>,*<span class="title">p2pre</span>;</span></span><br><span class="line">p=<span class="literal">NULL</span>;</span><br><span class="line">p1=p2=p2pre=abh;</span><br><span class="line"><span class="type">int</span> count=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(count&lt;sum)</span><br><span class="line">&#123;</span><br><span class="line">p1=p2=p2pre=abh;</span><br><span class="line"><span class="keyword">while</span>(p1-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">p2pre=p2;</span><br><span class="line">p2=p1;</span><br><span class="line">p1=p1-&gt;next;</span><br><span class="line"><span class="keyword">if</span>((p1-&gt;num)&lt;(p2-&gt;num))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(abh==p2)abh=p1;</span><br><span class="line"><span class="keyword">else</span> p2pre-&gt;next=p1;</span><br><span class="line">p2-&gt;next=p1-&gt;next;</span><br><span class="line">p1-&gt;next=p2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> abh;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="keyword">struct</span> student *head)</span>  <span class="comment">//输出函数</span></span><br><span class="line">  &#123;<span class="class"><span class="keyword">struct</span> <span class="title">student</span>  *<span class="title">p</span>;</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;There are %d records:  \n&quot;</span>,sum);</span><br><span class="line">   p=head;</span><br><span class="line">   <span class="keyword">if</span> (p !=<span class="literal">NULL</span>)</span><br><span class="line">     <span class="keyword">do</span></span><br><span class="line">       &#123;<span class="built_in">printf</span>(<span class="string">&quot;%ld %d\n&quot;</span>,p-&gt;num,p-&gt;score);</span><br><span class="line">    p=p-&gt;next;</span><br><span class="line">       &#125;<span class="keyword">while</span> (p !=<span class="literal">NULL</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="快速排序-1"><a href="#快速排序-1" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="c语言-1"><a href="#c语言-1" class="headerlink" title="c语言"></a>c语言</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">quicksort</span><span class="params">(<span class="type">int</span> arry[],<span class="type">int</span> L,<span class="type">int</span> R)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(L&gt;=R)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="type">int</span> left=L,right=R; </span><br><span class="line"><span class="type">int</span> pivot=arry[L];</span><br><span class="line"><span class="keyword">while</span>(left&lt;right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(left&lt;right&amp;&amp;arry[right]&gt;=pivot)</span><br><span class="line">&#123;right--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//if(left&lt;right)</span></span><br><span class="line">arry[left]=arry[right];</span><br><span class="line"><span class="keyword">while</span>(left&lt;right&amp;&amp;arry[left]&lt;=pivot)</span><br><span class="line">&#123;left++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//if(left&lt;right)</span></span><br><span class="line">arry[right]=arry[left];</span><br><span class="line"><span class="comment">//if(left&gt;=right)</span></span><br><span class="line"><span class="comment">//arry[left]=pivot;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">arry[left]=pivot;</span><br><span class="line">quicksort(arry,L,right<span class="number">-1</span>);</span><br><span class="line">quicksort(arry,right+<span class="number">1</span>,R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arry[<span class="number">9</span>];</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">&#123;<span class="built_in">printf</span>(<span class="string">&quot;%dth:&quot;</span>,i+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;arry[i]);</span><br><span class="line">&#125;</span><br><span class="line">quicksort(arry,<span class="number">0</span>,<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">9</span>;j++)</span><br><span class="line">&#123;<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arry[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="反转排序"><a href="#反转排序" class="headerlink" title="反转排序"></a>反转排序</h2><h3 id="java-1"><a href="#java-1" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String []args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> arry[]=&#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        Main sorter=<span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">        sorter.sort(arry);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] array)</span>&#123;</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        <span class="type">int</span> len=array.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;len/<span class="number">2</span>;i++)&#123;</span><br><span class="line">             temp=array[i];</span><br><span class="line">            array[i]=array[len-<span class="number">1</span>-i];</span><br><span class="line">            array[len-<span class="number">1</span>-i]=temp;</span><br><span class="line">        &#125; </span><br><span class="line">        showArray(array);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showArray</span><span class="params">(<span class="type">int</span>[] aray)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x:aray)&#123;</span><br><span class="line">            System.out.print(x );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="链表快速排序"><a href="#链表快速排序" class="headerlink" title="链表快速排序"></a>链表快速排序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LEN sizeof(struct student)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span>  <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">lista</span>, <span class="title">listb</span>;</span></span><br><span class="line"><span class="type">int</span> n, sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">struct</span> student* <span class="title function_">creat</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="keyword">struct</span> student* <span class="title function_">insert</span><span class="params">(<span class="keyword">struct</span> student*, <span class="keyword">struct</span> student*)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="keyword">struct</span> student*)</span>;</span><br><span class="line"><span class="keyword">struct</span> student* <span class="title function_">bianli</span><span class="params">(<span class="keyword">struct</span> student* abh)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">px</span><span class="params">(<span class="keyword">struct</span> student* abh, <span class="keyword">struct</span> student* abe)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">swapnode</span><span class="params">(<span class="keyword">struct</span> student* i, <span class="keyword">struct</span> student* j)</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>* <span class="title">ahead</span>, * <span class="title">bhead</span>, * <span class="title">abh</span>,*<span class="title">abe</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;input list a:\n&quot;</span>);</span><br><span class="line">ahead = creat();</span><br><span class="line">sum = sum + n;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;input list b:\n&quot;</span>);</span><br><span class="line">bhead = creat();</span><br><span class="line">sum = sum + n;</span><br><span class="line"></span><br><span class="line">abh = insert(ahead, bhead);</span><br><span class="line"></span><br><span class="line">abe = bianli(abh);</span><br><span class="line"></span><br><span class="line">px(abh, abe);</span><br><span class="line"></span><br><span class="line">print(abh);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> student* <span class="title function_">creat</span><span class="params">(<span class="type">void</span>)</span>       <span class="comment">//建立链表函数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>* <span class="title">p1</span>, * <span class="title">p2</span>, * <span class="title">head</span>;</span></span><br><span class="line">n = <span class="number">0</span>;</span><br><span class="line">p1 = p2 = (<span class="keyword">struct</span> student*)<span class="built_in">malloc</span>(LEN);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;input number &amp; scores of student:\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;if number is 0,stop inputing.\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%ld,%d&quot;</span>, &amp;p1-&gt;num, &amp;p1-&gt;score);</span><br><span class="line">head = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (p1-&gt;num != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">n = n + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">head = p1;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">p2-&gt;next = p1;</span><br><span class="line">p2 = p1;</span><br><span class="line">p1 = (<span class="keyword">struct</span> student*)<span class="built_in">malloc</span>(LEN);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%ld,%d&quot;</span>, &amp;p1-&gt;num, &amp;p1-&gt;score);</span><br><span class="line">&#125;</span><br><span class="line">p2-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span>(head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct student *insert(struct student *ah,struct student *bh)   //插入函数</span></span><br><span class="line"><span class="comment"> &#123;struct student * pa1,* pa2,* pb1,* pb2;</span></span><br><span class="line"><span class="comment">  pa2=pa1=ah;</span></span><br><span class="line"><span class="comment">  pb2=pb1=bh;</span></span><br><span class="line"><span class="comment">  do</span></span><br><span class="line"><span class="comment">  &#123;while((pb1-&gt;num&gt;pa1-&gt;num) &amp;&amp; (pa1-&gt;next !=NULL))</span></span><br><span class="line"><span class="comment"> &#123;pa2=pa1;</span></span><br><span class="line"><span class="comment">  pa1=pa1-&gt;next;</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment">if (pb1-&gt;num &lt;= pa1-&gt;num)</span></span><br><span class="line"><span class="comment"> &#123;if (ah==pa1)</span></span><br><span class="line"><span class="comment">ah=pb1;</span></span><br><span class="line"><span class="comment">  else</span></span><br><span class="line"><span class="comment">pa2-&gt;next=pb1;</span></span><br><span class="line"><span class="comment">  pb1=pb1-&gt;next;</span></span><br><span class="line"><span class="comment">  pb2-&gt;next=pa1;</span></span><br><span class="line"><span class="comment">  pa2=pb2;</span></span><br><span class="line"><span class="comment">  pb2=pb1;</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment">&#125;while ((pa1-&gt;next!=NULL) || (pa1==NULL &amp;&amp; pb1!=NULL));</span></span><br><span class="line"><span class="comment">if ((pb1!=NULL) &amp;&amp; (pb1-&gt;num&gt;pa1-&gt;num) &amp;&amp; (pa1-&gt;next==NULL))</span></span><br><span class="line"><span class="comment">  pa1-&gt;next=pb1;</span></span><br><span class="line"><span class="comment">return(ah);</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> student* <span class="title function_">insert</span><span class="params">(<span class="keyword">struct</span> student* ah, <span class="keyword">struct</span> student* bh)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>* <span class="title">pnew</span>;</span></span><br><span class="line">pnew = ah;</span><br><span class="line"><span class="keyword">while</span> (pnew-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">pnew = pnew-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">pnew-&gt;next = bh;</span><br><span class="line"><span class="keyword">return</span>(ah);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*struct student* px(struct student* abh, int sum)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">struct student* p, * p1, * p2, * p2pre;</span></span><br><span class="line"><span class="comment">p = NULL;</span></span><br><span class="line"><span class="comment">p1 = p2 = p2pre = abh;</span></span><br><span class="line"><span class="comment">int count = 1;</span></span><br><span class="line"><span class="comment">while (count &lt; sum)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">p1 = p2 = p2pre = abh;</span></span><br><span class="line"><span class="comment">while (p1-&gt;next != NULL)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">p2pre = p2;</span></span><br><span class="line"><span class="comment">p2 = p1;</span></span><br><span class="line"><span class="comment">p1 = p1-&gt;next;</span></span><br><span class="line"><span class="comment">if ((p1-&gt;num) &lt; (p2-&gt;num))</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">if (abh == p2)abh = p1;</span></span><br><span class="line"><span class="comment">else p2pre-&gt;next = p1;</span></span><br><span class="line"><span class="comment">p2-&gt;next = p1-&gt;next;</span></span><br><span class="line"><span class="comment">p1-&gt;next = p2;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">count++;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">return abh;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">struct</span> student* <span class="title function_">bianli</span><span class="params">(<span class="keyword">struct</span> student* abh)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>* <span class="title">abe</span>;</span></span><br><span class="line">abe = abh;</span><br><span class="line"><span class="keyword">while</span> (abe-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">abe = abe-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> abe;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">px</span><span class="params">(<span class="keyword">struct</span> student* abh, <span class="keyword">struct</span> student* abe)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((abe == abh) || (abh-&gt;next == <span class="literal">NULL</span>) || (abh == <span class="literal">NULL</span>)) <span class="keyword">return</span> ;</span><br><span class="line"><span class="type">void</span> <span class="title function_">swapnode</span><span class="params">(<span class="keyword">struct</span> student* i, <span class="keyword">struct</span> student* j)</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>* <span class="title">ipre</span>, * <span class="title">i</span>, * <span class="title">j</span>;</span></span><br><span class="line"><span class="type">int</span> pivot;</span><br><span class="line">ipre = abh;</span><br><span class="line">j=i = abh-&gt;next;</span><br><span class="line">pivot = abh-&gt;num;</span><br><span class="line"><span class="keyword">while</span> (j != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (j-&gt;num &lt; pivot)</span><br><span class="line">&#123;</span><br><span class="line">swapnode(i, j);</span><br><span class="line">ipre=i;</span><br><span class="line">i=i-&gt;next;</span><br><span class="line">&#125; </span><br><span class="line">j=j-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">swapnode(abh, ipre);</span><br><span class="line">px(abh, ipre);</span><br><span class="line">px(i, abe);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swapnode</span><span class="params">(<span class="keyword">struct</span> student* i, <span class="keyword">struct</span> student* j)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line">a = i-&gt;num;</span><br><span class="line">i-&gt;num = j-&gt;num;</span><br><span class="line">j-&gt;num = a;</span><br><span class="line">b = i-&gt;score;</span><br><span class="line">i-&gt;score = j-&gt;score;</span><br><span class="line">j-&gt;score = b;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="keyword">struct</span> student* head)</span>  <span class="comment">//输出函数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>* <span class="title">p</span>;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;There are %d records:  \n&quot;</span>, sum);</span><br><span class="line">p = head;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%ld %d\n&quot;</span>, p-&gt;num, p-&gt;score);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125; <span class="keyword">while</span> (p != <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="简单插入排序"><a href="#简单插入排序" class="headerlink" title="简单插入排序"></a>简单插入排序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="希尔排序法"><a href="#希尔排序法" class="headerlink" title="希尔排序法"></a>希尔排序法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="选择法排序"><a href="#选择法排序" class="headerlink" title="选择法排序"></a>选择法排序</h2><h3 id="c语言-2"><a href="#c语言-2" class="headerlink" title="c语言"></a>c语言</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> i,j,k,n,m,max,t;</span><br><span class="line">   <span class="comment">//scanf(&quot;%d&quot;,&amp;n);</span></span><br><span class="line">   <span class="type">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">5</span>&#125;;</span><br><span class="line">   <span class="type">int</span> len = <span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(a[<span class="number">0</span>]); </span><br><span class="line">  <span class="comment">// for(k=0;k&lt;=len;k++)</span></span><br><span class="line">    <span class="comment">//scanf(&quot;%d&quot;,a[k]);</span></span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;len<span class="number">-1</span>;j++)</span><br><span class="line">    &#123;max=a[j];</span><br><span class="line">    <span class="keyword">for</span>(i=j+<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line">     <span class="keyword">if</span>(a[i]&gt;max)</span><br><span class="line">     &#123;</span><br><span class="line">     max=a[i];</span><br><span class="line">     t=a[j];</span><br><span class="line">     a[j]=a[i];</span><br><span class="line">     a[i]=t;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;=len<span class="number">-1</span>;k++)</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[k]) ;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="java-2"><a href="#java-2" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String []args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> arry[]=&#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        Main sorter=<span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">        sorter.sort(arry);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] array)</span>&#123;</span><br><span class="line">        <span class="type">int</span> index;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">            index=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>;k&lt;=array.length-i;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(array[k]&gt;array[index])&#123;</span><br><span class="line">                    index=k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="type">int</span> temp=array[array.length-i];</span><br><span class="line">            array[array.length-i]=array[index];</span><br><span class="line">            array[index]=temp;</span><br><span class="line">        &#125; </span><br><span class="line">        showArray(array);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showArray</span><span class="params">(<span class="type">int</span>[] aray)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x:aray)&#123;</span><br><span class="line">            System.out.print(x );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="堆排序法"><a href="#堆排序法" class="headerlink" title="堆排序法"></a>堆排序法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="双指针-1"><a href="#双指针-1" class="headerlink" title="双指针"></a>双指针</h1><h2 id="删除数组元素-1"><a href="#删除数组元素-1" class="headerlink" title="删除数组元素"></a>删除数组元素</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Int <span class="title function_">return</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">Int slowp=<span class="number">0</span>;</span><br><span class="line">Int fastp=<span class="number">0</span>;</span><br><span class="line">For(fastp=<span class="number">0</span>;fastp&lt;=numszie;fastp++)</span><br><span class="line">&#123;</span><br><span class="line">If(nums[fastp]!=val)</span><br><span class="line">Nums[slowp++]=nums[fastp];</span><br><span class="line">&#125;</span><br><span class="line">Return slowp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="type">int</span> slowp=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> fastp=<span class="number">0</span>;fastp&lt;nums.length;fastp++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(nums[fastp]!=val)&#123;</span><br><span class="line">              nums[slowp++]=nums[fastp];</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> slowp;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="数组平方排序"><a href="#数组平方排序" class="headerlink" title="数组平方排序"></a>数组平方排序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note: The returned array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span>* <span class="title function_">sortedSquares</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span>* returnSize)</span>&#123;</span><br><span class="line">    *returnSize=numsSize;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right=numsSize<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span>* result=(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * numsSize);</span><br><span class="line">    <span class="keyword">for</span>(k=numsSize<span class="number">-1</span>;k&gt;=<span class="number">0</span>;k--)&#123;</span><br><span class="line">        <span class="type">int</span> lsquare=nums[left]*nums[left];</span><br><span class="line">        <span class="type">int</span> rsquare=nums[right]*nums[right];</span><br><span class="line">        <span class="keyword">if</span>(rsquare&gt;lsquare)&#123;</span><br><span class="line">            result[k]=rsquare;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            result[k]=lsquare;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">      <span class="type">int</span>[] result =<span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">      <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">      <span class="type">int</span> right=nums.length-<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> k=nums.length-<span class="number">1</span>;k&gt;=<span class="number">0</span>;k--)&#123;</span><br><span class="line">          <span class="type">int</span> lsquare=nums[left]*nums[left];</span><br><span class="line">          <span class="type">int</span> rqsuare=nums[right]*nums[right];</span><br><span class="line">          <span class="keyword">if</span>(rqsuare&gt;lsquare) &#123;</span><br><span class="line">              result[k] = rqsuare;</span><br><span class="line">              right--;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> &#123;</span><br><span class="line">              result[k]=lsquare;</span><br><span class="line">              left++;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; nums.length; right++) &#123;</span><br><span class="line">          sum += nums[right];</span><br><span class="line">          <span class="keyword">while</span> (sum &gt;= target) &#123;</span><br><span class="line">              result = Math.min(result, right - left + <span class="number">1</span>);</span><br><span class="line">              sum -= nums[left++];</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result == Integer.MAX_VALUE ? <span class="number">0</span> : result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="迷宫"><a href="#迷宫" class="headerlink" title="迷宫"></a>迷宫</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * To change this template, choose Tools | Templates</span></span><br><span class="line"><span class="comment"> * and open the template in the editor.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> migong;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args the command line arguments</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//绘制迷宫</span></span><br><span class="line">        <span class="type">int</span>[][] map = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">8</span>][<span class="number">7</span>];</span><br><span class="line">        <span class="comment">//最上与最下s</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">            map[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">            map[<span class="number">7</span>][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最左与最右</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            map[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            map[i][<span class="number">6</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//额外</span></span><br><span class="line">        map[<span class="number">3</span>][<span class="number">1</span>] = map[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        map[<span class="number">4</span>][<span class="number">2</span>] = map[<span class="number">5</span>][<span class="number">2</span>] = map[<span class="number">6</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        map[<span class="number">4</span>][<span class="number">4</span>] = map[<span class="number">5</span>][<span class="number">4</span>] = map[<span class="number">6</span>][<span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;当前地图======&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; map.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; map[i].length; j++) &#123;</span><br><span class="line">                System.out.print(map[i][j] + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找路</span></span><br><span class="line">        <span class="type">T</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line">        t1.findway(map, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n======找路的情况如下======&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; map.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; map[i].length; j++) &#123;</span><br><span class="line">                System.out.print(map[i][j] + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> &#123;</span><br><span class="line">    <span class="comment">//初始位置(1,1)</span></span><br><span class="line">    <span class="comment">// 0表示可以走 1 表示障碍物 2表示可以走(通路)3走过但是死路</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">findway</span><span class="params">(<span class="type">int</span>[][] map, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (map[<span class="number">6</span>][<span class="number">5</span>] == <span class="number">2</span>) &#123;<span class="comment">//找到</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (map[i][j] == <span class="number">0</span>) &#123;<span class="comment">//可以走没走过</span></span><br><span class="line">                map[i][j] = <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (findway(map, i + <span class="number">1</span>, j)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (findway(map, i, j + <span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (findway(map, i - <span class="number">1</span>, j)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (findway(map, i, j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    map[i][j] = <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;s</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc] &lt;/p&gt;
&lt;h1 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h1&gt;&lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
